/* soapStub.h
   Generated by gSOAP 2.8.16 from auto\tmp.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapStub_H
#define soapStub_H
#include <vector>
#define SOAP_NAMESPACE_OF_ns1	"http://www.foo.com"
#include "stdsoap2.h"
#if GSOAP_VERSION != 20816
# error "GSOAP VERSION MISMATCH IN GENERATED CODE: PLEASE REINSTALL PACKAGE"
#endif


/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE__ns1__settings_mtinstances_instance
#define SOAP_TYPE__ns1__settings_mtinstances_instance (12)
/* ns1:settings-mtinstances-instance */
class SOAP_CMAC _ns1__settings_mtinstances_instance
{
public:
	std::string path;	/* required element of type xsd:string */
	std::string name;	/* required element of type xsd:string */
	std::string loadbalanced;	/* required element of type xsd:string */
	std::string *autorecover;	/* optional element of type xsd:string */
	std::string *autoinstall;	/* optional element of type xsd:string */
	std::string *autoload;	/* optional element of type xsd:string */
	std::string *autoqueuerestore;	/* optional element of type xsd:string */
	std::string companyid;	/* required element of type xsd:string */
	std::string mt_USCOREdistrib;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 12; } /* = unique id SOAP_TYPE__ns1__settings_mtinstances_instance */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__settings_mtinstances_instance() { _ns1__settings_mtinstances_instance::soap_default(NULL); }
	virtual ~_ns1__settings_mtinstances_instance() { }
};
#endif

#ifndef SOAP_TYPE__ns1__settings_mtinstances
#define SOAP_TYPE__ns1__settings_mtinstances (11)
/* ns1:settings-mtinstances */
class SOAP_CMAC _ns1__settings_mtinstances
{
public:
	std::vector<_ns1__settings_mtinstances_instance >instance;	/* required element of type ns1:settings-mtinstances-instance */
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE__ns1__settings_mtinstances */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__settings_mtinstances() { _ns1__settings_mtinstances::soap_default(NULL); }
	virtual ~_ns1__settings_mtinstances() { }
};
#endif

#ifndef SOAP_TYPE__ns1__settings_generalparams_htserver
#define SOAP_TYPE__ns1__settings_generalparams_htserver (16)
/* ns1:settings-generalparams-htserver */
class SOAP_CMAC _ns1__settings_generalparams_htserver
{
public:
	std::string *debugconsole;	/* optional element of type xsd:string */
	std::string port;	/* required element of type xsd:integer */
	std::string internalloglevel;	/* required element of type xsd:integer */
	std::string eventlevel;	/* required element of type xsd:integer */
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE__ns1__settings_generalparams_htserver */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__settings_generalparams_htserver() { _ns1__settings_generalparams_htserver::soap_default(NULL); }
	virtual ~_ns1__settings_generalparams_htserver() { }
};
#endif

#ifndef SOAP_TYPE__ns1__settings_generalparams_eventpluginparams_entry
#define SOAP_TYPE__ns1__settings_generalparams_eventpluginparams_entry (18)
/* ns1:settings-generalparams-eventpluginparams-entry */
class SOAP_CMAC _ns1__settings_generalparams_eventpluginparams_entry
{
public:
	std::string name;	/* required element of type xsd:string */
	std::string value;	/* required element of type xsd:string */
public:
	virtual int soap_type() const { return 18; } /* = unique id SOAP_TYPE__ns1__settings_generalparams_eventpluginparams_entry */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__settings_generalparams_eventpluginparams_entry() { _ns1__settings_generalparams_eventpluginparams_entry::soap_default(NULL); }
	virtual ~_ns1__settings_generalparams_eventpluginparams_entry() { }
};
#endif

#ifndef SOAP_TYPE__ns1__settings_generalparams_eventpluginparams
#define SOAP_TYPE__ns1__settings_generalparams_eventpluginparams (17)
/* ns1:settings-generalparams-eventpluginparams */
class SOAP_CMAC _ns1__settings_generalparams_eventpluginparams
{
public:
	std::vector<_ns1__settings_generalparams_eventpluginparams_entry >entry;	/* required element of type ns1:settings-generalparams-eventpluginparams-entry */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE__ns1__settings_generalparams_eventpluginparams */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__settings_generalparams_eventpluginparams() { _ns1__settings_generalparams_eventpluginparams::soap_default(NULL); }
	virtual ~_ns1__settings_generalparams_eventpluginparams() { }
};
#endif

#ifndef SOAP_TYPE__ns1__settings_generalparams
#define SOAP_TYPE__ns1__settings_generalparams (15)
/* ns1:settings-generalparams */
class SOAP_CMAC _ns1__settings_generalparams
{
public:
	_ns1__settings_generalparams_htserver htserver;	/* required element of type ns1:settings-generalparams-htserver */
	_ns1__settings_generalparams_eventpluginparams eventpluginparams;	/* required element of type ns1:settings-generalparams-eventpluginparams */
public:
	virtual int soap_type() const { return 15; } /* = unique id SOAP_TYPE__ns1__settings_generalparams */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__settings_generalparams() { _ns1__settings_generalparams::soap_default(NULL); }
	virtual ~_ns1__settings_generalparams() { }
};
#endif

#ifndef SOAP_TYPE__ns1__settings
#define SOAP_TYPE__ns1__settings (10)
/* ns1:settings */
class SOAP_CMAC _ns1__settings
{
public:
	std::string mt4loglevel;	/* required element of type xsd:integer */
	std::string heartbeatjavahtsec;	/* required element of type xsd:integer */
	std::string mt4datareadintrvalsec;	/* required element of type xsd:integer */
	std::string zombiemt4killer;	/* required element of type xsd:integer */
	_ns1__settings_mtinstances mtinstances;	/* required element of type ns1:settings-mtinstances */
	_ns1__settings_generalparams generalparams;	/* required element of type ns1:settings-generalparams */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 10; } /* = unique id SOAP_TYPE__ns1__settings */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns1__settings() { _ns1__settings::soap_default(NULL); }
	virtual ~_ns1__settings() { }
};
#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (21)
/* SOAP Header: */
struct SOAP_ENV__Header
{
public:
	int soap_type() const { return 21; } /* = unique id SOAP_TYPE_SOAP_ENV__Header */
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (22)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
public:
	int soap_type() const { return 22; } /* = unique id SOAP_TYPE_SOAP_ENV__Code */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (24)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	char *__any;
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
public:
	int soap_type() const { return 24; } /* = unique id SOAP_TYPE_SOAP_ENV__Detail */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (27)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
public:
	int soap_type() const { return 27; } /* = unique id SOAP_TYPE_SOAP_ENV__Reason */
};
#endif

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (28)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
public:
	int soap_type() const { return 28; } /* = unique id SOAP_TYPE_SOAP_ENV__Fault */
};
#endif

#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (9)
typedef std::string xsd__integer;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


#endif

/* End of soapStub.h */
