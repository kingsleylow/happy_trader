/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * HtHistogramPanel.java
 *
 * Created on 11.07.2010, 9:58:27
 */
package com.fin.httrader.eventplugins.volanalizer;

import com.fin.httrader.utils.HtDateTimeUtils;
import com.fin.httrader.utils.HtUtils;
import java.awt.Color;
import java.text.DecimalFormat;
import java.util.Iterator;
import java.util.TreeMap;
import javax.swing.SwingUtilities;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DanilinS
 * This is a panel
 */
public class HtHistogramPanel extends javax.swing.JPanel {

	private DecimalFormat priceFormat_m = new DecimalFormat("###,###.00");

	/** Creates new form HtHistogramPanel */
	public HtHistogramPanel() {
		initComponents();

		DefaultTableModel model = (DefaultTableModel) jPriceHistTbl.getModel();
		model.addColumn("Price");
		model.addColumn("Qty");
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jLabel1 = new javax.swing.JLabel();
    jTimeTxt = new javax.swing.JTextField();
    jScrollPane1 = new javax.swing.JScrollPane();
    jPriceHistTbl = new javax.swing.JTable();

    setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

    jLabel1.setText("Time");

    jTimeTxt.setEditable(false);

    jPriceHistTbl.setModel(new DefaultTableModel() {
      public boolean isCellEditable(int rowIndex, int mColIndex) {
        return false;
      }
    });
    jScrollPane1.setViewportView(jPriceHistTbl);

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
    this.setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
          .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, 0, 177, Short.MAX_VALUE)
          .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jTimeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel1)
          .addComponent(jTimeTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
  }// </editor-fold>//GEN-END:initComponents
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JLabel jLabel1;
  private javax.swing.JTable jPriceHistTbl;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JTextField jTimeTxt;
  // End of variables declaration//GEN-END:variables

	public void initialize(AggregatedStructure aggrStruct, int filter_qty, int histbeans) {
		jTimeTxt.setText(HtDateTimeUtils.time2SimpleString_Gmt(aggrStruct.time_m));
		final DefaultTableModel model = (DefaultTableModel) jPriceHistTbl.getModel();

		if ((aggrStruct.close_m - aggrStruct.open_m) > 0) {
			jPriceHistTbl.setBackground(Color.green);
		} else {
			jPriceHistTbl.setBackground(Color.red);
		}


		SwingUtilities.invokeLater(new Runnable() {

					public void run() {
						model.setRowCount(0);
					}
		});


		TreeMap<Double, HistogramEntry> histogram = null;

		if (histbeans < 0) {
			histogram = aggrStruct.histogram_m;

		} else {
			histogram = aggrStruct.createHistogramPerBeans(histbeans);

		}

		for (Iterator<Double> it = histogram.keySet().iterator(); it.hasNext();) {
				final Double price_i = it.next();
				final HistogramEntry hentry = histogram.get(price_i);

				if (hentry.qty_m < filter_qty) {
					continue;
				}

				SwingUtilities.invokeLater(new Runnable() {

					public void run() {
						model.insertRow(model.getRowCount(), new Object[]{priceFormat_m.format(price_i), String.valueOf(hentry.qty_m)});
						//model.addRow(new Object[]{priceFormat_m.format(price_i), String.valueOf(hentry.qty_m)});
					}
				});

			}


		rvalidate();


	}

	public void beforeDelete() {
		DefaultTableModel model = (DefaultTableModel) jPriceHistTbl.getModel();
		model.setRowCount(0);

		this.setVisible(false);
	}

	public void rvalidate() {
		this.getRootPane().revalidate();
	}
}
