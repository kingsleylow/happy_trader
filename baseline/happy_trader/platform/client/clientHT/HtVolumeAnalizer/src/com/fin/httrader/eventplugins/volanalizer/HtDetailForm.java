/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * HtDetailForm.java
 *
 * Created on 23.06.2010, 14:31:48
 */
package com.fin.httrader.eventplugins.volanalizer;

import com.fin.httrader.utils.HtDateTimeUtils;
import com.fin.httrader.utils.HtUtils;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import javax.swing.BorderFactory;
import javax.swing.BoxLayout;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SpinnerListModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.border.Border;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author DanilinS
 */
public class HtDetailForm extends javax.swing.JFrame {

	private static final int AGGR_TABLE_TIME_COL_IDX = 0;
	private static final int AGGR_TABLE_OPEN_COL_IDX = 1;
	private static final int AGGR_TABLE_HIGH_COL_IDX = 2;
	private static final int AGGR_TABLE_LOW_COL_IDX = 3;
	private static final int AGGR_TABLE_CLOSE_COL_IDX = 4;
	private static final int AGGR_TABLE_VOL_COL_IDX = 5;


	

	// --------------------
	private DecimalFormat volumeFormat_m = new DecimalFormat("###,###,###,###.00");
	private DecimalFormat priceFormat_m = new DecimalFormat("###,###.00");
	private HtVolumeAnalizer parent_m = null;
	private TreeMap<Double, AggregatedStructure> totalList_m = null;
	// 
	private ArrayList<HtHistogramPanel> priceTableMap_m = new ArrayList<HtHistogramPanel>();
	private int filter_qty_m = 0;
	private int number_beans_m = -1;


	// --------------------
	/** Creates new form HtDetailForm */
	public HtDetailForm(
					String symbol,
					String aggrPeriodS,
					HtVolumeAnalizer parent) {
		initComponents();

		//
		filter_qty_m = HtUtils.parseInt(jFilterQtyText.getText());

		jFilterQtyText.getDocument().addDocumentListener(new DocumentListener() {

			public void changedUpdate(DocumentEvent de) {
				synchronized (priceTableMap_m) {
					filter_qty_m = HtUtils.parseInt(jFilterQtyText.getText());
					populateLastAggregationdata();
				}
			}

			public void insertUpdate(DocumentEvent de) {
				synchronized (priceTableMap_m) {
					filter_qty_m = HtUtils.parseInt(jFilterQtyText.getText());
					populateLastAggregationdata();
				}
			}

			public void removeUpdate(DocumentEvent de) {

			}
		});


		//
		DefaultTableModel mod = (DefaultTableModel) jAggrTab.getModel();
		mod.addColumn("Time");
		mod.addColumn("Open");
		mod.addColumn("High");
		mod.addColumn("Low");
		mod.addColumn("Close");
		mod.addColumn("Qty");

		GreenReadRowRenderer.signupForTable(jAggrTab, priceFormat_m, AGGR_TABLE_OPEN_COL_IDX, AGGR_TABLE_CLOSE_COL_IDX);

	
		//
		jTimeFrameTxt.setText(aggrPeriodS);
		jSymbolTxt.setText(symbol);

		parent_m = parent;
		parent_m.registerDetailedForm(symbol, aggrPeriodS, this);

		// here is an event of changing spinner
		jPeriodsBackSpinner.addChangeListener(new ChangeListener() {

			public void stateChanged(ChangeEvent e) {
				int cnt = ((SpinnerNumberModel) jPeriodsBackSpinner.getModel()).getNumber().intValue();
				synchronized (priceTableMap_m) {
					gui_adjustAggregationBoxLength(cnt);
					populateLastAggregationdata();
				}
			}
		});

		jSplitBeans.addChangeListener(new ChangeListener() {

			public void stateChanged(ChangeEvent e) {

				String split_beans_s = (String)((SpinnerListModel) jSplitBeans.getModel()).getValue();

				synchronized (priceTableMap_m) {

					if (split_beans_s != null) {
						if (split_beans_s.equals("ALL")) {
							number_beans_m = -1;
						}
						else {
							number_beans_m = HtUtils.parseInt(split_beans_s);
						}
					}

					populateLastAggregationdata();
				}
			}
		});

		gui_adjustAggregationBoxLength(((SpinnerNumberModel) jPeriodsBackSpinner.getModel()).getNumber().intValue());

	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    jScrollPane2 = new javax.swing.JScrollPane();
    jSplitPane1 = new javax.swing.JSplitPane();
    jScrollPane3 = new javax.swing.JScrollPane();
    jPanelBase = new javax.swing.JPanel();
    jPanel1 = new javax.swing.JPanel();
    jPanel2 = new javax.swing.JPanel();
    jLabel4 = new javax.swing.JLabel();
    jScrollPane1 = new javax.swing.JScrollPane();
    jAggrTab = new javax.swing.JTable();
    jPanel3 = new javax.swing.JPanel();
    jTimeFrameTxt = new javax.swing.JTextField();
    jSymbolTxt = new javax.swing.JTextField();
    jLabel3 = new javax.swing.JLabel();
    jPeriodsBackSpinner = new javax.swing.JSpinner();
    jLabel5 = new javax.swing.JLabel();
    jFilterQtyText = new javax.swing.JTextField();
    jLabel1 = new javax.swing.JLabel();
    jSplitBeans = new javax.swing.JSpinner();

    setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
    addWindowListener(new java.awt.event.WindowAdapter() {
      public void windowClosing(java.awt.event.WindowEvent evt) {
        formWindowClosing(evt);
      }
    });

    jSplitPane1.setDividerLocation(250);
    jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
    jSplitPane1.setMinimumSize(new java.awt.Dimension(0, 0));
    jSplitPane1.setPreferredSize(new java.awt.Dimension(100, 100));

    jPanelBase.setLayout(new javax.swing.BoxLayout(jPanelBase, javax.swing.BoxLayout.LINE_AXIS));
    jScrollPane3.setViewportView(jPanelBase);

    jSplitPane1.setTopComponent(jScrollPane3);

    jLabel4.setText("Aggregated Volumes");

    javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
    jPanel2.setLayout(jPanel2Layout);
    jPanel2Layout.setHorizontalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel2Layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(jLabel4)
        .addContainerGap(298, Short.MAX_VALUE))
    );
    jPanel2Layout.setVerticalGroup(
      jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jLabel4)
    );

    jAggrTab.setModel(new DefaultTableModel() {
      public boolean isCellEditable(int rowIndex, int mColIndex) {
        return false;
      }
    });
    jScrollPane1.setViewportView(jAggrTab);

    javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
    jPanel1.setLayout(jPanel1Layout);
    jPanel1Layout.setHorizontalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 407, Short.MAX_VALUE)
      .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    jPanel1Layout.setVerticalGroup(
      jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel1Layout.createSequentialGroup()
        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 95, Short.MAX_VALUE))
    );

    jSplitPane1.setRightComponent(jPanel1);

    jPanel3.setMaximumSize(new java.awt.Dimension(32767, 92));
    jPanel3.setMinimumSize(new java.awt.Dimension(100, 92));

    jTimeFrameTxt.setEditable(false);

    jSymbolTxt.setEditable(false);

    jLabel3.setText("Show periods back");

    jPeriodsBackSpinner.setModel(new javax.swing.SpinnerNumberModel(3, 1, 100, 1));

    jLabel5.setText("Hide Qty less than");

    jFilterQtyText.setText("5");

    jLabel1.setText("Split histogram with");

    jSplitBeans.setModel(new javax.swing.SpinnerListModel(new String[] {"ALL", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "15", "20"}));

    javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
    jPanel3.setLayout(jPanel3Layout);
    jPanel3Layout.setHorizontalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel3Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
          .addComponent(jTimeFrameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel3))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
          .addGroup(jPanel3Layout.createSequentialGroup()
            .addComponent(jPeriodsBackSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGap(24, 24, 24)
            .addComponent(jLabel5)
            .addGap(18, 18, 18)
            .addComponent(jFilterQtyText))
          .addGroup(jPanel3Layout.createSequentialGroup()
            .addComponent(jSymbolTxt, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jLabel1)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
            .addComponent(jSplitBeans, javax.swing.GroupLayout.PREFERRED_SIZE, 65, javax.swing.GroupLayout.PREFERRED_SIZE)))
        .addContainerGap(62, Short.MAX_VALUE))
    );
    jPanel3Layout.setVerticalGroup(
      jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(jPanel3Layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jTimeFrameTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jSymbolTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel1)
          .addComponent(jSplitBeans, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
          .addComponent(jLabel3)
          .addComponent(jPeriodsBackSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
          .addComponent(jLabel5)
          .addComponent(jFilterQtyText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE)
      .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
        .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

		private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
			// TODO add your handling code here:
			parent_m.removeDetailForm(jSymbolTxt.getText(), jTimeFrameTxt.getText());
		}//GEN-LAST:event_formWindowClosing
	/**
	 * @param args the command line arguments
	 */
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JTable jAggrTab;
  private javax.swing.JTextField jFilterQtyText;
  private javax.swing.JLabel jLabel1;
  private javax.swing.JLabel jLabel3;
  private javax.swing.JLabel jLabel4;
  private javax.swing.JLabel jLabel5;
  private javax.swing.JPanel jPanel1;
  private javax.swing.JPanel jPanel2;
  private javax.swing.JPanel jPanel3;
  private javax.swing.JPanel jPanelBase;
  private javax.swing.JSpinner jPeriodsBackSpinner;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JScrollPane jScrollPane2;
  private javax.swing.JScrollPane jScrollPane3;
  private javax.swing.JSpinner jSplitBeans;
  private javax.swing.JSplitPane jSplitPane1;
  private javax.swing.JTextField jSymbolTxt;
  private javax.swing.JTextField jTimeFrameTxt;
  // End of variables declaration//GEN-END:variables

	public void addEntry(AggregatedStructure aggrStruct, TreeMap<Double, AggregatedStructure> totalList) throws Exception {


		totalList_m = totalList;
		DefaultTableModel mod = (DefaultTableModel) jAggrTab.getModel();
		/*
		mod.addColumn("Time");
		mod.addColumn("Qty");
		 */



		mod.addRow(new Object[]{
							HtDateTimeUtils.time2SimpleString_Gmt(aggrStruct.time_m),
							priceFormat_m.format(aggrStruct.open_m),
							priceFormat_m.format(aggrStruct.high_m),
							priceFormat_m.format(aggrStruct.low_m),
							priceFormat_m.format(aggrStruct.close_m),
							String.valueOf(aggrStruct.qty_m)
		});



		synchronized (priceTableMap_m) {
			// readjust
			// need to redraw all
			populateLastAggregationdata();
			//Utils.packColumn(jAggrTab, AGGR_TABLE_TIME_COL_IDX, 2);
		}

	// now need to adopt what we have as maximum number
	}

	public void updateLastEntry(AggregatedStructure aggrStruct, TreeMap<Double, AggregatedStructure> totalList) throws Exception {

		totalList_m = totalList;
		DefaultTableModel tmodel = (DefaultTableModel) jAggrTab.getModel();

		int idx = tmodel.getRowCount() - 1;

		if (idx >= 0) {


			tmodel.setValueAt(HtDateTimeUtils.time2SimpleString_Gmt(aggrStruct.time_m), idx, this.AGGR_TABLE_TIME_COL_IDX);
			tmodel.setValueAt(priceFormat_m.format(aggrStruct.open_m), idx, this.AGGR_TABLE_OPEN_COL_IDX);
			tmodel.setValueAt(priceFormat_m.format(aggrStruct.high_m), idx, this.AGGR_TABLE_HIGH_COL_IDX);
			tmodel.setValueAt(priceFormat_m.format(aggrStruct.low_m), idx, this.AGGR_TABLE_LOW_COL_IDX);
			tmodel.setValueAt(priceFormat_m.format(aggrStruct.close_m), idx, this.AGGR_TABLE_CLOSE_COL_IDX);
			tmodel.setValueAt(String.valueOf(aggrStruct.qty_m), idx, this.AGGR_TABLE_VOL_COL_IDX);
			

			synchronized (priceTableMap_m) {
				// readjust

				if (totalList.size() > 0) {
					// last entry
					Double lastTime = totalList.lastKey();
					AggregatedStructure struct_i = totalList.get(lastTime);

					// get the last of GUI
					gui_updateAggregationBox(0, struct_i);


				}




			}
		}


	}

	/*
	 * Helpers
	 */
	private void populateLastAggregationdata() {
		int cnt = 0;
		synchronized (parent_m.getBaseMutex()) {
			for (Iterator<Double> it = totalList_m.descendingKeySet().iterator(); it.hasNext();) {


				AggregatedStructure struct_i = totalList_m.get(it.next());
				gui_updateAggregationBox(cnt, struct_i);

				if (++cnt >= priceTableMap_m.size()) {
					break;
				}

			}
		}
	}

	private void gui_updateAggregationBox(int idx, AggregatedStructure aggrStruct) {
		if (priceTableMap_m.size() > idx) {
			HtHistogramPanel at = priceTableMap_m.get(idx);
			at.initialize(aggrStruct, filter_qty_m, number_beans_m);
			
		}

	}

	

	private void gui_adjustAggregationBoxLength(int newCount) {

		if (newCount > priceTableMap_m.size()) {
			// add
			int cnt = newCount - priceTableMap_m.size();

			for (int i = 0; i < cnt; i++) {
				HtHistogramPanel at = new HtHistogramPanel();
				priceTableMap_m.add(at);

				// add
				jPanelBase.add(at);
			}
		} else if (newCount < priceTableMap_m.size()) {
			// remove

			List<HtHistogramPanel> toDelete = new ArrayList<HtHistogramPanel>();
			for (int i = priceTableMap_m.size() - 1; i >= newCount; i--) {
				HtHistogramPanel at = priceTableMap_m.get(i);

				toDelete.add(at);

			}

			for (int i = 0; i < toDelete.size(); i++) {
				priceTableMap_m.remove(toDelete.get(i));

				HtHistogramPanel at = toDelete.get(i);
				at.beforeDelete();
				jPanelBase.remove(at);
			}

		}

		
		jPanelBase.getRootPane().revalidate();
	}
}
