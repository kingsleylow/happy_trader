/*
 * HtRangeBreakerView.java
 */
package htrangebreaker;

import com.fin.httrader.utils.HtUtils;
import htrangebreaker.utils.ProgressDialogInterface;
import htrangebreaker.utils.gui.HtWorkInProgress2;
import java.awt.Dimension;
import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyVetoException;
import java.beans.VetoableChangeListener;
import java.util.HashMap;
import java.util.HashSet;
import javax.swing.Timer;
import javax.swing.Icon;
import javax.swing.JDialog;
import javax.swing.JFrame;
import javax.swing.JInternalFrame;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.WindowConstants;

/**
 * The application's main frame.
 */
public class HtRangeBreakerView extends FrameView {

	private static HtRangeBreakerView instance_m = null;
	private HtWorkInProgress2 wip2_m = null;
	private HashMap<JInternalFrame, JMenuItem> winSet_m = new HashMap<JInternalFrame, JMenuItem>();

	//
	public HtRangeBreakerView(SingleFrameApplication app) {
		super(app);

		initComponents();

		JFrame mainFrame = HtRangeBreakerApp.getApplication().getMainFrame();


		HtSettings.setInstance(new HtSettings(mainFrame, true));
		HtSettings.getInstance().setLocationRelativeTo(mainFrame);

		this.getFrame().setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

		// internal loggig
		HtInternalLogWindow f = new HtInternalLogWindow();
		jDesktopPane1.add(f);
		f.setVisible(true);

		wip2_m = new HtWorkInProgress2();
		jDesktopPane1.add(wip2_m);
		
		jDesktopPane1.setSize(500, 400);

		instance_m = this;


	}

	public static HtRangeBreakerView getInstance() {
		return instance_m;
	}

	public void showWIPDialog(final ProgressDialogInterface pdint, final String message) {
		
			SwingUtilities.invokeLater(new Runnable() {

				public void run() {

					wip2_m.initialize(pdint, message);
					wip2_m.setModal(true);

					wip2_m.setVisible(true);
				}
			});
		
	}

	public void hideWIPDialog() {
			
			SwingUtilities.invokeLater(new Runnable() {

				public void run() {
					wip2_m.reset();
					wip2_m.setVisible(false);
				}
			});

	}

	@Action
	public void showAboutBox() {
		if (aboutBox == null) {
			JFrame mainFrame = HtRangeBreakerApp.getApplication().getMainFrame();
			aboutBox =
							new HtRangeBreakerAboutBox(mainFrame);
			aboutBox.setLocationRelativeTo(mainFrame);
		}

		HtRangeBreakerApp.getApplication().show(aboutBox);
	}

	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    mainPanel = new javax.swing.JPanel();
    jDesktopPane1 = new javax.swing.JDesktopPane();
    menuBar = new javax.swing.JMenuBar();
    javax.swing.JMenu fileMenu = new javax.swing.JMenu();
    jMenuItem1 = new javax.swing.JMenuItem();
    jMenuItem4 = new javax.swing.JMenuItem();
    jMenuItem2 = new javax.swing.JMenuItem();
    javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
    jWindowMenu = new javax.swing.JMenu();
    javax.swing.JMenu helpMenu = new javax.swing.JMenu();
    javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();

    mainPanel.setName("mainPanel"); // NOI18N

    jDesktopPane1.setName("jDesktopPane1"); // NOI18N

    javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
    mainPanel.setLayout(mainPanelLayout);
    mainPanelLayout.setHorizontalGroup(
      mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jDesktopPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 398, Short.MAX_VALUE)
    );
    mainPanelLayout.setVerticalGroup(
      mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addComponent(jDesktopPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 279, Short.MAX_VALUE)
    );

    menuBar.setName("menuBar"); // NOI18N

    org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(htrangebreaker.HtRangeBreakerApp.class).getContext().getResourceMap(HtRangeBreakerView.class);
    fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
    fileMenu.setName("fileMenu"); // NOI18N

    javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(htrangebreaker.HtRangeBreakerApp.class).getContext().getActionMap(HtRangeBreakerView.class, this);
    jMenuItem1.setAction(actionMap.get("onShowSample")); // NOI18N
    jMenuItem1.setText(resourceMap.getString("jMenuItem1.text")); // NOI18N
    jMenuItem1.setName("jMenuItem1"); // NOI18N
    fileMenu.add(jMenuItem1);

    jMenuItem4.setAction(actionMap.get("onTradeEvents")); // NOI18N
    jMenuItem4.setText(resourceMap.getString("jMenuItem4.text")); // NOI18N
    jMenuItem4.setName("jMenuItem4"); // NOI18N
    fileMenu.add(jMenuItem4);

    jMenuItem2.setAction(actionMap.get("onDoSettins")); // NOI18N
    jMenuItem2.setText(resourceMap.getString("jMenuItem2.text")); // NOI18N
    jMenuItem2.setName("jMenuItem2"); // NOI18N
    fileMenu.add(jMenuItem2);

    exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
    exitMenuItem.setName("exitMenuItem"); // NOI18N
    fileMenu.add(exitMenuItem);

    menuBar.add(fileMenu);

    jWindowMenu.setText(resourceMap.getString("jWindowMenu.text")); // NOI18N
    jWindowMenu.setName("jWindowMenu"); // NOI18N
    menuBar.add(jWindowMenu);

    helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
    helpMenu.setName("helpMenu"); // NOI18N

    aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
    aboutMenuItem.setName("aboutMenuItem"); // NOI18N
    helpMenu.add(aboutMenuItem);

    menuBar.add(helpMenu);

    setComponent(mainPanel);
    setMenuBar(menuBar);
  }// </editor-fold>//GEN-END:initComponents

	@Action
	public void onShowSample() {
		HtLoggingWindow f = new HtLoggingWindow();
		registerWindow(f);
	
	}

	@Action
	public void onDoSettins() {

		HtRangeBreakerApp.getApplication().show(HtSettings.getInstance());

	}

	/*
	@Action
	public void onCommand() {
		JInternalFrame fr = findJFrameWithCaption("Commands");

		if (fr == null) {
			HtCommandCenter f = new HtCommandCenter();
			jDesktopPane1.add(f);
			f.setVisible(true);
		} else {
			fr.setVisible(true);
		}
	}
	 */

	@Action
	public void onTradeEvents() {
	
		HtDrawableWindow f = new HtDrawableWindow();
		registerWindow(f);

	}

  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JDesktopPane jDesktopPane1;
  private javax.swing.JMenuItem jMenuItem1;
  private javax.swing.JMenuItem jMenuItem2;
  private javax.swing.JMenuItem jMenuItem4;
  private javax.swing.JMenu jWindowMenu;
  private javax.swing.JPanel mainPanel;
  private javax.swing.JMenuBar menuBar;
  // End of variables declaration//GEN-END:variables
	private JDialog aboutBox;

	/*
	 * Helpers
	 */
	private JInternalFrame findJFrameWithCaption(String caption) {
		JInternalFrame[] frames = jDesktopPane1.getAllFrames();
		if (frames != null) {
			for (int i = 0; i < frames.length; i++) {
				if (frames[i] == null)
					continue;

				if (frames[i].getTitle().equalsIgnoreCase(caption)) {
					return frames[i];
				}
			}
		}

		return null;
	}

	private int findJFrameWithCaptionCount(String caption) {
		int cnt = 0;
		JInternalFrame[] frames = jDesktopPane1.getAllFrames();
		if (frames != null) {
			
			for (int i = 0; i < frames.length; i++) {
				if (frames[i] == null)
					continue;
				if (frames[i].getTitle().equalsIgnoreCase(caption)) {
					cnt++;
				}
			}
		}

		return cnt;
	}
	
	private void registerWindow(final JInternalFrame frame)
	{
		jDesktopPane1.add(frame);
		String caption = frame.getTitle();
		int cnt = findJFrameWithCaptionCount( caption );
		String menuId = caption + " - " + String.valueOf(cnt);
		JMenuItem mi = new JMenuItem(menuId);
		winSet_m.put(frame, mi);

		mi.addActionListener( new ActionListener() {

			public void actionPerformed(ActionEvent e) {
				frame.toFront();
			}
		});
	
		jWindowMenu.add(mi);

		frame.setVisible(true);
	}

	// will be called automatically when closed
	public void deregisterWindow(JInternalFrame frame)
	{
	
	
		JMenuItem mi = winSet_m.get(frame);
		if (mi != null) {
			jWindowMenu.remove(mi);

			frame.setVisible(false);
			jDesktopPane1.remove(frame);
			frame = null;
		}
	}

	
}
