/* soapC.cpp
   Generated by gSOAP 2.8.16 from auto\tmp.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.16 2015-08-22 12:44:45 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", soap->header, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->version && soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->version && soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (soap->header == NULL)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (soap->fault == NULL)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (soap->fault == NULL)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Code)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode == NULL)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Code && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode && soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
			return soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
		return NULL;
	}
	return soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (soap->fault->SOAP_ENV__Detail == NULL)
		{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
			soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
		}
		return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
	}
	if (soap->fault->detail == NULL)
	{	soap->fault->detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
	}
	return (const char**)&soap->fault->detail->__any;
}

SOAP_FMAC3 const char * SOAP_FMAC4 soap_check_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2 && soap->fault->SOAP_ENV__Detail)
		return soap->fault->SOAP_ENV__Detail->__any;
	if (soap->fault->detail)
		return soap->fault->detail->__any;
	return NULL;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{	(void)type;
	if (soap_peek_element(soap))
		return NULL;
#ifndef WITH_NOIDREF
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_xsd__integer:
		return soap_in_xsd__integer(soap, NULL, NULL, "xsd:integer");
	case SOAP_TYPE_std__string:
		return soap_in_std__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTostd__string:
		return soap_in_PointerTostd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
#else
	*type = 0;
#endif
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "xsd:integer"))
		{	*type = SOAP_TYPE_xsd__integer;
			return soap_in_xsd__integer(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__string;
			return soap_in_std__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns1:settings-generalparams-eventpluginparams-entry"))
		{	*type = SOAP_TYPE__ns1__settings_generalparams_eventpluginparams_entry;
			return soap_in__ns1__settings_generalparams_eventpluginparams_entry(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:settings-generalparams-eventpluginparams"))
		{	*type = SOAP_TYPE__ns1__settings_generalparams_eventpluginparams;
			return soap_in__ns1__settings_generalparams_eventpluginparams(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:settings-generalparams-htserver"))
		{	*type = SOAP_TYPE__ns1__settings_generalparams_htserver;
			return soap_in__ns1__settings_generalparams_htserver(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:settings-generalparams"))
		{	*type = SOAP_TYPE__ns1__settings_generalparams;
			return soap_in__ns1__settings_generalparams(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:settings-mtinstances-instance"))
		{	*type = SOAP_TYPE__ns1__settings_mtinstances_instance;
			return soap_in__ns1__settings_mtinstances_instance(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:settings-mtinstances"))
		{	*type = SOAP_TYPE__ns1__settings_mtinstances;
			return soap_in__ns1__settings_mtinstances(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns1:settings"))
		{	*type = SOAP_TYPE__ns1__settings;
			return soap_in__ns1__settings(soap, NULL, NULL, NULL);
		}
#ifndef WITH_NOIDREF
	}
#endif
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{	(void)tag;
	switch (type)
	{
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE__ns1__settings_generalparams_eventpluginparams_entry:
		return ((_ns1__settings_generalparams_eventpluginparams_entry *)ptr)->soap_out(soap, "ns1:settings-generalparams-eventpluginparams-entry", id, NULL);
	case SOAP_TYPE__ns1__settings_generalparams_eventpluginparams:
		return ((_ns1__settings_generalparams_eventpluginparams *)ptr)->soap_out(soap, "ns1:settings-generalparams-eventpluginparams", id, NULL);
	case SOAP_TYPE__ns1__settings_generalparams_htserver:
		return ((_ns1__settings_generalparams_htserver *)ptr)->soap_out(soap, "ns1:settings-generalparams-htserver", id, NULL);
	case SOAP_TYPE__ns1__settings_generalparams:
		return ((_ns1__settings_generalparams *)ptr)->soap_out(soap, "ns1:settings-generalparams", id, NULL);
	case SOAP_TYPE__ns1__settings_mtinstances_instance:
		return ((_ns1__settings_mtinstances_instance *)ptr)->soap_out(soap, "ns1:settings-mtinstances-instance", id, NULL);
	case SOAP_TYPE__ns1__settings_mtinstances:
		return ((_ns1__settings_mtinstances *)ptr)->soap_out(soap, "ns1:settings-mtinstances", id, NULL);
	case SOAP_TYPE__ns1__settings:
		return ((_ns1__settings *)ptr)->soap_out(soap, "ns1:settings", id, NULL);
	case SOAP_TYPE_xsd__integer:
		return soap_out_xsd__integer(soap, tag, id, (const std::string *)ptr, "xsd:integer");
	case SOAP_TYPE_std__string:
		return soap_out_std__string(soap, tag, id, (const std::string *)ptr, "xsd:string");
	case SOAP_TYPE_PointerTostd__string:
		return soap_out_PointerTostd__string(soap, tag, id, (std::string *const*)ptr, "xsd:string");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE__ns1__settings_generalparams_eventpluginparams_entry:
		((_ns1__settings_generalparams_eventpluginparams_entry *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__settings_generalparams_eventpluginparams:
		((_ns1__settings_generalparams_eventpluginparams *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__settings_generalparams_htserver:
		((_ns1__settings_generalparams_htserver *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__settings_generalparams:
		((_ns1__settings_generalparams *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__settings_mtinstances_instance:
		((_ns1__settings_mtinstances_instance *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__settings_mtinstances:
		((_ns1__settings_mtinstances *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns1__settings:
		((_ns1__settings *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__integer:
		soap_serialize_xsd__integer(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_std__string:
		soap_serialize_std__string(soap, (const std::string *)ptr);
		break;
	case SOAP_TYPE_PointerTostd__string:
		soap_serialize_PointerTostd__string(soap, (std::string *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{	(void)type;
	switch (t)
	{
	case SOAP_TYPE_std__string:
		return (void*)soap_instantiate_std__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__settings_mtinstances_instance:
		return (void*)soap_instantiate__ns1__settings_mtinstances_instance(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__settings_mtinstances:
		return (void*)soap_instantiate__ns1__settings_mtinstances(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__settings_generalparams_htserver:
		return (void*)soap_instantiate__ns1__settings_generalparams_htserver(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__settings_generalparams_eventpluginparams_entry:
		return (void*)soap_instantiate__ns1__settings_generalparams_eventpluginparams_entry(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__settings_generalparams_eventpluginparams:
		return (void*)soap_instantiate__ns1__settings_generalparams_eventpluginparams(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__settings_generalparams:
		return (void*)soap_instantiate__ns1__settings_generalparams(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns1__settings:
		return (void*)soap_instantiate__ns1__settings(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__integer:
		return (void*)soap_instantiate_xsd__integer(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry:
		return (void*)soap_instantiate_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__vectorTemplateOf_ns1__settings_mtinstances_instance:
		return (void*)soap_instantiate_std__vectorTemplateOf_ns1__settings_mtinstances_instance(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_std__string:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE__ns1__settings_mtinstances_instance:
		if (p->size < 0)
			SOAP_DELETE((_ns1__settings_mtinstances_instance*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__settings_mtinstances_instance*)p->ptr);
		break;
	case SOAP_TYPE__ns1__settings_mtinstances:
		if (p->size < 0)
			SOAP_DELETE((_ns1__settings_mtinstances*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__settings_mtinstances*)p->ptr);
		break;
	case SOAP_TYPE__ns1__settings_generalparams_htserver:
		if (p->size < 0)
			SOAP_DELETE((_ns1__settings_generalparams_htserver*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__settings_generalparams_htserver*)p->ptr);
		break;
	case SOAP_TYPE__ns1__settings_generalparams_eventpluginparams_entry:
		if (p->size < 0)
			SOAP_DELETE((_ns1__settings_generalparams_eventpluginparams_entry*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__settings_generalparams_eventpluginparams_entry*)p->ptr);
		break;
	case SOAP_TYPE__ns1__settings_generalparams_eventpluginparams:
		if (p->size < 0)
			SOAP_DELETE((_ns1__settings_generalparams_eventpluginparams*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__settings_generalparams_eventpluginparams*)p->ptr);
		break;
	case SOAP_TYPE__ns1__settings_generalparams:
		if (p->size < 0)
			SOAP_DELETE((_ns1__settings_generalparams*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__settings_generalparams*)p->ptr);
		break;
	case SOAP_TYPE__ns1__settings:
		if (p->size < 0)
			SOAP_DELETE((_ns1__settings*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns1__settings*)p->ptr);
		break;
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
#endif
	case SOAP_TYPE_xsd__integer:
		if (p->size < 0)
			SOAP_DELETE((std::string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::string*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry:
		if (p->size < 0)
			SOAP_DELETE((std::vector<_ns1__settings_generalparams_eventpluginparams_entry >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<_ns1__settings_generalparams_eventpluginparams_entry >*)p->ptr);
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns1__settings_mtinstances_instance:
		if (p->size < 0)
			SOAP_DELETE((std::vector<_ns1__settings_mtinstances_instance >*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::vector<_ns1__settings_mtinstances_instance >*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap *soap, const char *href, void *p, size_t len, int st, int tt, size_t n, unsigned int k)
{	return soap_id_forward(soap, href, p, len, st, tt, n, k, soap_container_insert);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
#ifdef WIN32
#pragma warning(push)
#pragma warning(disable:4065)
#endif
{
	(void)soap; (void)st; (void)p; (void)len; (void)q; (void)n; /* appease -Wall -Werror */
	switch (tt)
	{
	case SOAP_TYPE_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<_ns1__settings_generalparams_eventpluginparams_entry >*)p)[len] = *(_ns1__settings_generalparams_eventpluginparams_entry *)q;
		break;
	case SOAP_TYPE_std__vectorTemplateOf_ns1__settings_mtinstances_instance:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Container soap_container_insert type=%d in %d location=%p object=%p len=%lu\n", st, tt, p, q, (unsigned long)len));
		(*(std::vector<_ns1__settings_mtinstances_instance >*)p)[len] = *(_ns1__settings_mtinstances_instance *)q;
		break;
	default:
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Could not insert type=%d in %d\n", st, tt));
	}
#ifdef WIN32
#pragma warning(pop)
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{	(void)soap; (void)type; (void)tag; (void)id;
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void _ns1__settings_generalparams_eventpluginparams_entry::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->_ns1__settings_generalparams_eventpluginparams_entry::name);
	soap_default_std__string(soap, &this->_ns1__settings_generalparams_eventpluginparams_entry::value);
}

void _ns1__settings_generalparams_eventpluginparams_entry::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__settings_generalparams_eventpluginparams_entry::name, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__settings_generalparams_eventpluginparams_entry::name);
	soap_embedded(soap, &this->_ns1__settings_generalparams_eventpluginparams_entry::value, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__settings_generalparams_eventpluginparams_entry::value);
#endif
}

int _ns1__settings_generalparams_eventpluginparams_entry::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__settings_generalparams_eventpluginparams_entry(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__settings_generalparams_eventpluginparams_entry(struct soap *soap, const char *tag, int id, const _ns1__settings_generalparams_eventpluginparams_entry *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__settings_generalparams_eventpluginparams_entry), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:name", -1, &(a->_ns1__settings_generalparams_eventpluginparams_entry::name), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:value", -1, &(a->_ns1__settings_generalparams_eventpluginparams_entry::value), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__settings_generalparams_eventpluginparams_entry::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__settings_generalparams_eventpluginparams_entry(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__settings_generalparams_eventpluginparams_entry * SOAP_FMAC4 soap_in__ns1__settings_generalparams_eventpluginparams_entry(struct soap *soap, const char *tag, _ns1__settings_generalparams_eventpluginparams_entry *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__settings_generalparams_eventpluginparams_entry *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__settings_generalparams_eventpluginparams_entry, sizeof(_ns1__settings_generalparams_eventpluginparams_entry), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__settings_generalparams_eventpluginparams_entry)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__settings_generalparams_eventpluginparams_entry *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_name1 = 1;
	size_t soap_flag_value1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns1:name", &(a->_ns1__settings_generalparams_eventpluginparams_entry::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_value1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns1:value", &(a->_ns1__settings_generalparams_eventpluginparams_entry::value), "xsd:string"))
				{	soap_flag_value1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__settings_generalparams_eventpluginparams_entry *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__settings_generalparams_eventpluginparams_entry, 0, sizeof(_ns1__settings_generalparams_eventpluginparams_entry), 0, soap_copy__ns1__settings_generalparams_eventpluginparams_entry);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_name1 > 0 || soap_flag_value1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__settings_generalparams_eventpluginparams_entry::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__settings_generalparams_eventpluginparams_entry);
	if (this->soap_out(soap, tag?tag:"ns1:settings-generalparams-eventpluginparams-entry", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__settings_generalparams_eventpluginparams_entry::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__settings_generalparams_eventpluginparams_entry(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__settings_generalparams_eventpluginparams_entry * SOAP_FMAC4 soap_get__ns1__settings_generalparams_eventpluginparams_entry(struct soap *soap, _ns1__settings_generalparams_eventpluginparams_entry *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__settings_generalparams_eventpluginparams_entry(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__settings_generalparams_eventpluginparams_entry * SOAP_FMAC2 soap_instantiate__ns1__settings_generalparams_eventpluginparams_entry(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__settings_generalparams_eventpluginparams_entry(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__settings_generalparams_eventpluginparams_entry, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__settings_generalparams_eventpluginparams_entry);
		if (size)
			*size = sizeof(_ns1__settings_generalparams_eventpluginparams_entry);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__settings_generalparams_eventpluginparams_entry, n);
		if (size)
			*size = n * sizeof(_ns1__settings_generalparams_eventpluginparams_entry);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__settings_generalparams_eventpluginparams_entry*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__settings_generalparams_eventpluginparams_entry(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__settings_generalparams_eventpluginparams_entry %p -> %p\n", q, p));
	*(_ns1__settings_generalparams_eventpluginparams_entry*)p = *(_ns1__settings_generalparams_eventpluginparams_entry*)q;
}

void _ns1__settings_generalparams_eventpluginparams::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(soap, &this->_ns1__settings_generalparams_eventpluginparams::entry);
}

void _ns1__settings_generalparams_eventpluginparams::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(soap, &this->_ns1__settings_generalparams_eventpluginparams::entry);
#endif
}

int _ns1__settings_generalparams_eventpluginparams::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__settings_generalparams_eventpluginparams(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__settings_generalparams_eventpluginparams(struct soap *soap, const char *tag, int id, const _ns1__settings_generalparams_eventpluginparams *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__settings_generalparams_eventpluginparams), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(soap, "ns1:entry", -1, &(a->_ns1__settings_generalparams_eventpluginparams::entry), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__settings_generalparams_eventpluginparams::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__settings_generalparams_eventpluginparams(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__settings_generalparams_eventpluginparams * SOAP_FMAC4 soap_in__ns1__settings_generalparams_eventpluginparams(struct soap *soap, const char *tag, _ns1__settings_generalparams_eventpluginparams *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__settings_generalparams_eventpluginparams *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__settings_generalparams_eventpluginparams, sizeof(_ns1__settings_generalparams_eventpluginparams), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__settings_generalparams_eventpluginparams)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__settings_generalparams_eventpluginparams *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(soap, "ns1:entry", &(a->_ns1__settings_generalparams_eventpluginparams::entry), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__settings_generalparams_eventpluginparams *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__settings_generalparams_eventpluginparams, 0, sizeof(_ns1__settings_generalparams_eventpluginparams), 0, soap_copy__ns1__settings_generalparams_eventpluginparams);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (a->_ns1__settings_generalparams_eventpluginparams::entry.size() < 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__settings_generalparams_eventpluginparams::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__settings_generalparams_eventpluginparams);
	if (this->soap_out(soap, tag?tag:"ns1:settings-generalparams-eventpluginparams", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__settings_generalparams_eventpluginparams::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__settings_generalparams_eventpluginparams(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__settings_generalparams_eventpluginparams * SOAP_FMAC4 soap_get__ns1__settings_generalparams_eventpluginparams(struct soap *soap, _ns1__settings_generalparams_eventpluginparams *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__settings_generalparams_eventpluginparams(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__settings_generalparams_eventpluginparams * SOAP_FMAC2 soap_instantiate__ns1__settings_generalparams_eventpluginparams(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__settings_generalparams_eventpluginparams(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__settings_generalparams_eventpluginparams, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__settings_generalparams_eventpluginparams);
		if (size)
			*size = sizeof(_ns1__settings_generalparams_eventpluginparams);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__settings_generalparams_eventpluginparams, n);
		if (size)
			*size = n * sizeof(_ns1__settings_generalparams_eventpluginparams);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__settings_generalparams_eventpluginparams*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__settings_generalparams_eventpluginparams(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__settings_generalparams_eventpluginparams %p -> %p\n", q, p));
	*(_ns1__settings_generalparams_eventpluginparams*)p = *(_ns1__settings_generalparams_eventpluginparams*)q;
}

void _ns1__settings_generalparams_htserver::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__settings_generalparams_htserver::debugconsole = NULL;
	soap_default_xsd__integer(soap, &this->_ns1__settings_generalparams_htserver::port);
	soap_default_xsd__integer(soap, &this->_ns1__settings_generalparams_htserver::internalloglevel);
	soap_default_xsd__integer(soap, &this->_ns1__settings_generalparams_htserver::eventlevel);
}

void _ns1__settings_generalparams_htserver::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__string(soap, &this->_ns1__settings_generalparams_htserver::debugconsole);
	soap_serialize_xsd__integer(soap, &this->_ns1__settings_generalparams_htserver::port);
	soap_serialize_xsd__integer(soap, &this->_ns1__settings_generalparams_htserver::internalloglevel);
	soap_serialize_xsd__integer(soap, &this->_ns1__settings_generalparams_htserver::eventlevel);
#endif
}

int _ns1__settings_generalparams_htserver::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__settings_generalparams_htserver(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__settings_generalparams_htserver(struct soap *soap, const char *tag, int id, const _ns1__settings_generalparams_htserver *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__settings_generalparams_htserver), type))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:debugconsole", -1, &(a->_ns1__settings_generalparams_htserver::debugconsole), ""))
		return soap->error;
	if (soap_out_xsd__integer(soap, "ns1:port", -1, &(a->_ns1__settings_generalparams_htserver::port), ""))
		return soap->error;
	if (soap_out_xsd__integer(soap, "ns1:internalloglevel", -1, &(a->_ns1__settings_generalparams_htserver::internalloglevel), ""))
		return soap->error;
	if (soap_out_xsd__integer(soap, "ns1:eventlevel", -1, &(a->_ns1__settings_generalparams_htserver::eventlevel), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__settings_generalparams_htserver::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__settings_generalparams_htserver(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__settings_generalparams_htserver * SOAP_FMAC4 soap_in__ns1__settings_generalparams_htserver(struct soap *soap, const char *tag, _ns1__settings_generalparams_htserver *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__settings_generalparams_htserver *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__settings_generalparams_htserver, sizeof(_ns1__settings_generalparams_htserver), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__settings_generalparams_htserver)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__settings_generalparams_htserver *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_debugconsole1 = 1;
	size_t soap_flag_port1 = 1;
	size_t soap_flag_internalloglevel1 = 1;
	size_t soap_flag_eventlevel1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_debugconsole1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:debugconsole", &(a->_ns1__settings_generalparams_htserver::debugconsole), "xsd:string"))
				{	soap_flag_debugconsole1--;
					continue;
				}
			if (soap_flag_port1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "ns1:port", &(a->_ns1__settings_generalparams_htserver::port), "xsd:integer"))
				{	soap_flag_port1--;
					continue;
				}
			if (soap_flag_internalloglevel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "ns1:internalloglevel", &(a->_ns1__settings_generalparams_htserver::internalloglevel), "xsd:integer"))
				{	soap_flag_internalloglevel1--;
					continue;
				}
			if (soap_flag_eventlevel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "ns1:eventlevel", &(a->_ns1__settings_generalparams_htserver::eventlevel), "xsd:integer"))
				{	soap_flag_eventlevel1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__settings_generalparams_htserver *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__settings_generalparams_htserver, 0, sizeof(_ns1__settings_generalparams_htserver), 0, soap_copy__ns1__settings_generalparams_htserver);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_port1 > 0 || soap_flag_internalloglevel1 > 0 || soap_flag_eventlevel1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__settings_generalparams_htserver::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__settings_generalparams_htserver);
	if (this->soap_out(soap, tag?tag:"ns1:settings-generalparams-htserver", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__settings_generalparams_htserver::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__settings_generalparams_htserver(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__settings_generalparams_htserver * SOAP_FMAC4 soap_get__ns1__settings_generalparams_htserver(struct soap *soap, _ns1__settings_generalparams_htserver *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__settings_generalparams_htserver(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__settings_generalparams_htserver * SOAP_FMAC2 soap_instantiate__ns1__settings_generalparams_htserver(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__settings_generalparams_htserver(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__settings_generalparams_htserver, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__settings_generalparams_htserver);
		if (size)
			*size = sizeof(_ns1__settings_generalparams_htserver);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__settings_generalparams_htserver, n);
		if (size)
			*size = n * sizeof(_ns1__settings_generalparams_htserver);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__settings_generalparams_htserver*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__settings_generalparams_htserver(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__settings_generalparams_htserver %p -> %p\n", q, p));
	*(_ns1__settings_generalparams_htserver*)p = *(_ns1__settings_generalparams_htserver*)q;
}

void _ns1__settings_generalparams::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__settings_generalparams::htserver._ns1__settings_generalparams_htserver::soap_default(soap);
	this->_ns1__settings_generalparams::eventpluginparams._ns1__settings_generalparams_eventpluginparams::soap_default(soap);
}

void _ns1__settings_generalparams::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	this->_ns1__settings_generalparams::htserver.soap_serialize(soap);
	this->_ns1__settings_generalparams::eventpluginparams.soap_serialize(soap);
#endif
}

int _ns1__settings_generalparams::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__settings_generalparams(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__settings_generalparams(struct soap *soap, const char *tag, int id, const _ns1__settings_generalparams *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__settings_generalparams), type))
		return soap->error;
	if ((a->_ns1__settings_generalparams::htserver).soap_out(soap, "ns1:htserver", -1, ""))
		return soap->error;
	if ((a->_ns1__settings_generalparams::eventpluginparams).soap_out(soap, "ns1:eventpluginparams", -1, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__settings_generalparams::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__settings_generalparams(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__settings_generalparams * SOAP_FMAC4 soap_in__ns1__settings_generalparams(struct soap *soap, const char *tag, _ns1__settings_generalparams *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__settings_generalparams *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__settings_generalparams, sizeof(_ns1__settings_generalparams), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__settings_generalparams)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__settings_generalparams *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_htserver1 = 1;
	size_t soap_flag_eventpluginparams1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_htserver1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->_ns1__settings_generalparams::htserver).soap_in(soap, "ns1:htserver", ""))
				{	soap_flag_htserver1--;
					continue;
				}
			if (soap_flag_eventpluginparams1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->_ns1__settings_generalparams::eventpluginparams).soap_in(soap, "ns1:eventpluginparams", ""))
				{	soap_flag_eventpluginparams1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__settings_generalparams *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__settings_generalparams, 0, sizeof(_ns1__settings_generalparams), 0, soap_copy__ns1__settings_generalparams);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_htserver1 > 0 || soap_flag_eventpluginparams1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__settings_generalparams::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__settings_generalparams);
	if (this->soap_out(soap, tag?tag:"ns1:settings-generalparams", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__settings_generalparams::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__settings_generalparams(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__settings_generalparams * SOAP_FMAC4 soap_get__ns1__settings_generalparams(struct soap *soap, _ns1__settings_generalparams *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__settings_generalparams(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__settings_generalparams * SOAP_FMAC2 soap_instantiate__ns1__settings_generalparams(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__settings_generalparams(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__settings_generalparams, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__settings_generalparams);
		if (size)
			*size = sizeof(_ns1__settings_generalparams);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__settings_generalparams, n);
		if (size)
			*size = n * sizeof(_ns1__settings_generalparams);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__settings_generalparams*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__settings_generalparams(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__settings_generalparams %p -> %p\n", q, p));
	*(_ns1__settings_generalparams*)p = *(_ns1__settings_generalparams*)q;
}

void _ns1__settings_mtinstances_instance::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__string(soap, &this->_ns1__settings_mtinstances_instance::path);
	soap_default_std__string(soap, &this->_ns1__settings_mtinstances_instance::name);
	soap_default_std__string(soap, &this->_ns1__settings_mtinstances_instance::loadbalanced);
	this->_ns1__settings_mtinstances_instance::autorecover = NULL;
	this->_ns1__settings_mtinstances_instance::autoinstall = NULL;
	this->_ns1__settings_mtinstances_instance::autoload = NULL;
	this->_ns1__settings_mtinstances_instance::autoqueuerestore = NULL;
	soap_default_std__string(soap, &this->_ns1__settings_mtinstances_instance::companyid);
	soap_default_std__string(soap, &this->_ns1__settings_mtinstances_instance::mt_USCOREdistrib);
}

void _ns1__settings_mtinstances_instance::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->_ns1__settings_mtinstances_instance::path, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__settings_mtinstances_instance::path);
	soap_embedded(soap, &this->_ns1__settings_mtinstances_instance::name, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__settings_mtinstances_instance::name);
	soap_embedded(soap, &this->_ns1__settings_mtinstances_instance::loadbalanced, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__settings_mtinstances_instance::loadbalanced);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__settings_mtinstances_instance::autorecover);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__settings_mtinstances_instance::autoinstall);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__settings_mtinstances_instance::autoload);
	soap_serialize_PointerTostd__string(soap, &this->_ns1__settings_mtinstances_instance::autoqueuerestore);
	soap_embedded(soap, &this->_ns1__settings_mtinstances_instance::companyid, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__settings_mtinstances_instance::companyid);
	soap_embedded(soap, &this->_ns1__settings_mtinstances_instance::mt_USCOREdistrib, SOAP_TYPE_std__string);
	soap_serialize_std__string(soap, &this->_ns1__settings_mtinstances_instance::mt_USCOREdistrib);
#endif
}

int _ns1__settings_mtinstances_instance::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__settings_mtinstances_instance(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__settings_mtinstances_instance(struct soap *soap, const char *tag, int id, const _ns1__settings_mtinstances_instance *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__settings_mtinstances_instance), type))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:path", -1, &(a->_ns1__settings_mtinstances_instance::path), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:name", -1, &(a->_ns1__settings_mtinstances_instance::name), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:loadbalanced", -1, &(a->_ns1__settings_mtinstances_instance::loadbalanced), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:autorecover", -1, &(a->_ns1__settings_mtinstances_instance::autorecover), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:autoinstall", -1, &(a->_ns1__settings_mtinstances_instance::autoinstall), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:autoload", -1, &(a->_ns1__settings_mtinstances_instance::autoload), ""))
		return soap->error;
	if (soap_out_PointerTostd__string(soap, "ns1:autoqueuerestore", -1, &(a->_ns1__settings_mtinstances_instance::autoqueuerestore), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:companyid", -1, &(a->_ns1__settings_mtinstances_instance::companyid), ""))
		return soap->error;
	if (soap_out_std__string(soap, "ns1:mt_distrib", -1, &(a->_ns1__settings_mtinstances_instance::mt_USCOREdistrib), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__settings_mtinstances_instance::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__settings_mtinstances_instance(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__settings_mtinstances_instance * SOAP_FMAC4 soap_in__ns1__settings_mtinstances_instance(struct soap *soap, const char *tag, _ns1__settings_mtinstances_instance *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__settings_mtinstances_instance *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__settings_mtinstances_instance, sizeof(_ns1__settings_mtinstances_instance), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__settings_mtinstances_instance)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__settings_mtinstances_instance *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_path1 = 1;
	size_t soap_flag_name1 = 1;
	size_t soap_flag_loadbalanced1 = 1;
	size_t soap_flag_autorecover1 = 1;
	size_t soap_flag_autoinstall1 = 1;
	size_t soap_flag_autoload1 = 1;
	size_t soap_flag_autoqueuerestore1 = 1;
	size_t soap_flag_companyid1 = 1;
	size_t soap_flag_mt_USCOREdistrib1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_path1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns1:path", &(a->_ns1__settings_mtinstances_instance::path), "xsd:string"))
				{	soap_flag_path1--;
					continue;
				}
			if (soap_flag_name1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns1:name", &(a->_ns1__settings_mtinstances_instance::name), "xsd:string"))
				{	soap_flag_name1--;
					continue;
				}
			if (soap_flag_loadbalanced1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns1:loadbalanced", &(a->_ns1__settings_mtinstances_instance::loadbalanced), "xsd:string"))
				{	soap_flag_loadbalanced1--;
					continue;
				}
			if (soap_flag_autorecover1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:autorecover", &(a->_ns1__settings_mtinstances_instance::autorecover), "xsd:string"))
				{	soap_flag_autorecover1--;
					continue;
				}
			if (soap_flag_autoinstall1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:autoinstall", &(a->_ns1__settings_mtinstances_instance::autoinstall), "xsd:string"))
				{	soap_flag_autoinstall1--;
					continue;
				}
			if (soap_flag_autoload1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:autoload", &(a->_ns1__settings_mtinstances_instance::autoload), "xsd:string"))
				{	soap_flag_autoload1--;
					continue;
				}
			if (soap_flag_autoqueuerestore1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__string(soap, "ns1:autoqueuerestore", &(a->_ns1__settings_mtinstances_instance::autoqueuerestore), "xsd:string"))
				{	soap_flag_autoqueuerestore1--;
					continue;
				}
			if (soap_flag_companyid1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns1:companyid", &(a->_ns1__settings_mtinstances_instance::companyid), "xsd:string"))
				{	soap_flag_companyid1--;
					continue;
				}
			if (soap_flag_mt_USCOREdistrib1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_std__string(soap, "ns1:mt_distrib", &(a->_ns1__settings_mtinstances_instance::mt_USCOREdistrib), "xsd:string"))
				{	soap_flag_mt_USCOREdistrib1--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__settings_mtinstances_instance *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__settings_mtinstances_instance, 0, sizeof(_ns1__settings_mtinstances_instance), 0, soap_copy__ns1__settings_mtinstances_instance);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_path1 > 0 || soap_flag_name1 > 0 || soap_flag_loadbalanced1 > 0 || soap_flag_companyid1 > 0 || soap_flag_mt_USCOREdistrib1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__settings_mtinstances_instance::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__settings_mtinstances_instance);
	if (this->soap_out(soap, tag?tag:"ns1:settings-mtinstances-instance", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__settings_mtinstances_instance::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__settings_mtinstances_instance(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__settings_mtinstances_instance * SOAP_FMAC4 soap_get__ns1__settings_mtinstances_instance(struct soap *soap, _ns1__settings_mtinstances_instance *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__settings_mtinstances_instance(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__settings_mtinstances_instance * SOAP_FMAC2 soap_instantiate__ns1__settings_mtinstances_instance(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__settings_mtinstances_instance(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__settings_mtinstances_instance, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__settings_mtinstances_instance);
		if (size)
			*size = sizeof(_ns1__settings_mtinstances_instance);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__settings_mtinstances_instance, n);
		if (size)
			*size = n * sizeof(_ns1__settings_mtinstances_instance);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__settings_mtinstances_instance*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__settings_mtinstances_instance(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__settings_mtinstances_instance %p -> %p\n", q, p));
	*(_ns1__settings_mtinstances_instance*)p = *(_ns1__settings_mtinstances_instance*)q;
}

void _ns1__settings_mtinstances::soap_default(struct soap *soap)
{
	(void)soap; /* appease -Wall -Werror */
	soap_default_std__vectorTemplateOf_ns1__settings_mtinstances_instance(soap, &this->_ns1__settings_mtinstances::instance);
}

void _ns1__settings_mtinstances::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_std__vectorTemplateOf_ns1__settings_mtinstances_instance(soap, &this->_ns1__settings_mtinstances::instance);
#endif
}

int _ns1__settings_mtinstances::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__settings_mtinstances(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__settings_mtinstances(struct soap *soap, const char *tag, int id, const _ns1__settings_mtinstances *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__settings_mtinstances), type))
		return soap->error;
	if (soap_out_std__vectorTemplateOf_ns1__settings_mtinstances_instance(soap, "ns1:instance", -1, &(a->_ns1__settings_mtinstances::instance), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *_ns1__settings_mtinstances::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__settings_mtinstances(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__settings_mtinstances * SOAP_FMAC4 soap_in__ns1__settings_mtinstances(struct soap *soap, const char *tag, _ns1__settings_mtinstances *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__settings_mtinstances *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__settings_mtinstances, sizeof(_ns1__settings_mtinstances), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__settings_mtinstances)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__settings_mtinstances *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_std__vectorTemplateOf_ns1__settings_mtinstances_instance(soap, "ns1:instance", &(a->_ns1__settings_mtinstances::instance), ""))
					continue;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__settings_mtinstances *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__settings_mtinstances, 0, sizeof(_ns1__settings_mtinstances), 0, soap_copy__ns1__settings_mtinstances);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (a->_ns1__settings_mtinstances::instance.size() < 1))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__settings_mtinstances::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__settings_mtinstances);
	if (this->soap_out(soap, tag?tag:"ns1:settings-mtinstances", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__settings_mtinstances::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__settings_mtinstances(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__settings_mtinstances * SOAP_FMAC4 soap_get__ns1__settings_mtinstances(struct soap *soap, _ns1__settings_mtinstances *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__settings_mtinstances(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__settings_mtinstances * SOAP_FMAC2 soap_instantiate__ns1__settings_mtinstances(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__settings_mtinstances(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__settings_mtinstances, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__settings_mtinstances);
		if (size)
			*size = sizeof(_ns1__settings_mtinstances);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__settings_mtinstances, n);
		if (size)
			*size = n * sizeof(_ns1__settings_mtinstances);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__settings_mtinstances*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__settings_mtinstances(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__settings_mtinstances %p -> %p\n", q, p));
	*(_ns1__settings_mtinstances*)p = *(_ns1__settings_mtinstances*)q;
}

void _ns1__settings::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__integer(soap, &this->_ns1__settings::mt4loglevel);
	soap_default_xsd__integer(soap, &this->_ns1__settings::heartbeatjavahtsec);
	soap_default_xsd__integer(soap, &this->_ns1__settings::mt4datareadintrvalsec);
	soap_default_xsd__integer(soap, &this->_ns1__settings::zombiemt4killer);
	this->_ns1__settings::mtinstances._ns1__settings_mtinstances::soap_default(soap);
	this->_ns1__settings::generalparams._ns1__settings_generalparams::soap_default(soap);
	/* transient soap skipped */
}

void _ns1__settings::soap_serialize(struct soap *soap) const
{
#ifndef WITH_NOIDREF
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__integer(soap, &this->_ns1__settings::mt4loglevel);
	soap_serialize_xsd__integer(soap, &this->_ns1__settings::heartbeatjavahtsec);
	soap_serialize_xsd__integer(soap, &this->_ns1__settings::mt4datareadintrvalsec);
	soap_serialize_xsd__integer(soap, &this->_ns1__settings::zombiemt4killer);
	this->_ns1__settings::mtinstances.soap_serialize(soap);
	this->_ns1__settings::generalparams.soap_serialize(soap);
	/* transient soap skipped */
#endif
}

int _ns1__settings::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns1__settings(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__settings(struct soap *soap, const char *tag, int id, const _ns1__settings *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns1__settings), type))
		return soap->error;
	if (soap_out_xsd__integer(soap, "ns1:mt4loglevel", -1, &(a->_ns1__settings::mt4loglevel), ""))
		return soap->error;
	if (soap_out_xsd__integer(soap, "ns1:heartbeatjavahtsec", -1, &(a->_ns1__settings::heartbeatjavahtsec), ""))
		return soap->error;
	if (soap_out_xsd__integer(soap, "ns1:mt4datareadintrvalsec", -1, &(a->_ns1__settings::mt4datareadintrvalsec), ""))
		return soap->error;
	if (soap_out_xsd__integer(soap, "ns1:zombiemt4killer", -1, &(a->_ns1__settings::zombiemt4killer), ""))
		return soap->error;
	if ((a->_ns1__settings::mtinstances).soap_out(soap, "ns1:mtinstances", -1, ""))
		return soap->error;
	if ((a->_ns1__settings::generalparams).soap_out(soap, "ns1:generalparams", -1, ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns1__settings::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns1__settings(soap, tag, this, type);
}

SOAP_FMAC3 _ns1__settings * SOAP_FMAC4 soap_in__ns1__settings(struct soap *soap, const char *tag, _ns1__settings *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns1__settings *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns1__settings, sizeof(_ns1__settings), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns1__settings)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns1__settings *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_mt4loglevel1 = 1;
	size_t soap_flag_heartbeatjavahtsec1 = 1;
	size_t soap_flag_mt4datareadintrvalsec1 = 1;
	size_t soap_flag_zombiemt4killer1 = 1;
	size_t soap_flag_mtinstances1 = 1;
	size_t soap_flag_generalparams1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_mt4loglevel1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "ns1:mt4loglevel", &(a->_ns1__settings::mt4loglevel), "xsd:integer"))
				{	soap_flag_mt4loglevel1--;
					continue;
				}
			if (soap_flag_heartbeatjavahtsec1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "ns1:heartbeatjavahtsec", &(a->_ns1__settings::heartbeatjavahtsec), "xsd:integer"))
				{	soap_flag_heartbeatjavahtsec1--;
					continue;
				}
			if (soap_flag_mt4datareadintrvalsec1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "ns1:mt4datareadintrvalsec", &(a->_ns1__settings::mt4datareadintrvalsec), "xsd:integer"))
				{	soap_flag_mt4datareadintrvalsec1--;
					continue;
				}
			if (soap_flag_zombiemt4killer1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_xsd__integer(soap, "ns1:zombiemt4killer", &(a->_ns1__settings::zombiemt4killer), "xsd:integer"))
				{	soap_flag_zombiemt4killer1--;
					continue;
				}
			if (soap_flag_mtinstances1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->_ns1__settings::mtinstances).soap_in(soap, "ns1:mtinstances", ""))
				{	soap_flag_mtinstances1--;
					continue;
				}
			if (soap_flag_generalparams1 && soap->error == SOAP_TAG_MISMATCH)
				if ((a->_ns1__settings::generalparams).soap_in(soap, "ns1:generalparams", ""))
				{	soap_flag_generalparams1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns1__settings *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns1__settings, 0, sizeof(_ns1__settings), 0, soap_copy__ns1__settings);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_mt4loglevel1 > 0 || soap_flag_heartbeatjavahtsec1 > 0 || soap_flag_mt4datareadintrvalsec1 > 0 || soap_flag_zombiemt4killer1 > 0 || soap_flag_mtinstances1 > 0 || soap_flag_generalparams1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int _ns1__settings::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns1__settings);
	if (this->soap_out(soap, tag?tag:"ns1:settings", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns1__settings::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns1__settings(soap, this, tag, type);
}

SOAP_FMAC3 _ns1__settings * SOAP_FMAC4 soap_get__ns1__settings(struct soap *soap, _ns1__settings *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns1__settings(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns1__settings * SOAP_FMAC2 soap_instantiate__ns1__settings(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns1__settings(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns1__settings, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns1__settings);
		if (size)
			*size = sizeof(_ns1__settings);
		((_ns1__settings*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(_ns1__settings, n);
		if (size)
			*size = n * sizeof(_ns1__settings);
		if (cp->ptr)
			for (int i = 0; i < n; i++)
				((_ns1__settings*)cp->ptr)[i].soap = soap;
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (_ns1__settings*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__settings(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns1__settings %p -> %p\n", q, p));
	*(_ns1__settings*)p = *(_ns1__settings*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__integer), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__integer, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__integer, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__integer, 0, sizeof(std::string), 0, soap_copy_xsd__integer);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__integer);
	if (soap_out_xsd__integer(soap, tag?tag:"xsd:integer", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__integer(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap *soap, std::string *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap *soap, const std::string *a)
{	(void)soap; (void)a; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap *soap, const char *tag, int id, const std::string *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__string), type) || soap_string_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap *soap, const char *tag, std::string *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__string(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	char *t;
		s = (std::string*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType);
		if (s)
		{	if (!(t = soap_string_in(soap, 1, 0, -1)))
				return NULL;
			s->assign(t);
		}
	}
	else
		s = (std::string*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__string, sizeof(std::string), soap->type, soap->arrayType), 0, SOAP_TYPE_std__string, 0, sizeof(std::string), 0, soap_copy_std__string);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap *soap, const std::string *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__string);
	if (soap_out_std__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap *soap, std::string *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::string);
		if (size)
			*size = sizeof(std::string);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::string, n);
		if (size)
			*size = n * sizeof(std::string);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::string %p -> %p\n", q, p));
	*(std::string*)p = *(std::string*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Fault, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Reason, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__any = NULL;
	a->__type = 0;
	a->fault = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag___any = 1;
	size_t soap_flag_fault = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Detail, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Code, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
#ifndef WITH_NOIDREF
	(void)soap; (void)a; /* appease -Wall -Werror */
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	(void)soap; (void)tag; (void)id; (void)type;
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(struct SOAP_ENV__Header, n);
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap *soap, std::string *const*a)
{
#ifndef WITH_NOIDREF
	if (!soap_reference(soap, *a, SOAP_TYPE_std__string))
		soap_serialize_std__string(soap, *a);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap *soap, const char *tag, int id, std::string *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__string);
	if (id < 0)
		return soap->error;
	return soap_out_std__string(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap *soap, const char *tag, std::string **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::string **)soap_malloc(soap, sizeof(std::string *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__string(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::string **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__string, sizeof(std::string), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap *soap, std::string *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__string);
	if (soap_out_PointerTostd__string(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap *soap, std::string **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE__QName);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
#ifndef WITH_NOIDREF
	soap_reference(soap, *a, SOAP_TYPE_string);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, 0, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(struct soap *soap, std::vector<_ns1__settings_generalparams_eventpluginparams_entry >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(struct soap *soap, const std::vector<_ns1__settings_generalparams_eventpluginparams_entry >*a)
{
#ifndef WITH_NOIDREF
	for (std::vector<_ns1__settings_generalparams_eventpluginparams_entry >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(struct soap *soap, const char *tag, int id, const std::vector<_ns1__settings_generalparams_eventpluginparams_entry >*a, const char *type)
{
	for (std::vector<_ns1__settings_generalparams_eventpluginparams_entry >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns1__settings_generalparams_eventpluginparams_entry >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(struct soap *soap, const char *tag, std::vector<_ns1__settings_generalparams_eventpluginparams_entry >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	_ns1__settings_generalparams_eventpluginparams_entry n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n.soap_default(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE__ns1__settings_generalparams_eventpluginparams_entry, SOAP_TYPE_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry, sizeof(_ns1__settings_generalparams_eventpluginparams_entry), 0))
				break;
			if (!soap_in__ns1__settings_generalparams_eventpluginparams_entry(soap, tag, NULL, ""))
				break;
		}
		else if (!soap_in__ns1__settings_generalparams_eventpluginparams_entry(soap, tag, &n, ""))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(soap, -1)))
			return NULL;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns1__settings_generalparams_eventpluginparams_entry > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<_ns1__settings_generalparams_eventpluginparams_entry >);
		if (size)
			*size = sizeof(std::vector<_ns1__settings_generalparams_eventpluginparams_entry >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<_ns1__settings_generalparams_eventpluginparams_entry >, n);
		if (size)
			*size = n * sizeof(std::vector<_ns1__settings_generalparams_eventpluginparams_entry >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<_ns1__settings_generalparams_eventpluginparams_entry >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<_ns1__settings_generalparams_eventpluginparams_entry > %p -> %p\n", q, p));
	*(std::vector<_ns1__settings_generalparams_eventpluginparams_entry >*)p = *(std::vector<_ns1__settings_generalparams_eventpluginparams_entry >*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns1__settings_mtinstances_instance(struct soap *soap, std::vector<_ns1__settings_mtinstances_instance >*p)
{
	p->clear();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns1__settings_mtinstances_instance(struct soap *soap, const std::vector<_ns1__settings_mtinstances_instance >*a)
{
#ifndef WITH_NOIDREF
	for (std::vector<_ns1__settings_mtinstances_instance >::const_iterator i = a->begin(); i != a->end(); ++i)
		(*i).soap_serialize(soap);
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns1__settings_mtinstances_instance(struct soap *soap, const char *tag, int id, const std::vector<_ns1__settings_mtinstances_instance >*a, const char *type)
{
	for (std::vector<_ns1__settings_mtinstances_instance >::const_iterator i = a->begin(); i != a->end(); ++i)
	{
		if ((*i).soap_out(soap, tag, id, ""))
			return soap->error;
	}
	return SOAP_OK;
}

SOAP_FMAC3 std::vector<_ns1__settings_mtinstances_instance >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns1__settings_mtinstances_instance(struct soap *soap, const char *tag, std::vector<_ns1__settings_mtinstances_instance >*a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	short soap_flag;
	for (soap_flag = 0;; soap_flag = 1)
	{	_ns1__settings_mtinstances_instance n;
		if (tag && *tag != '-')
		{	if (soap_element_begin_in(soap, tag, 1, NULL))
				break;
			soap_revert(soap);
		}
		n.soap_default(soap);
		if (tag && *tag != '-' && (*soap->id || *soap->href))
		{	if (!soap_container_id_forward(soap, *soap->id?soap->id:soap->href, a, (size_t)a->size(), SOAP_TYPE__ns1__settings_mtinstances_instance, SOAP_TYPE_std__vectorTemplateOf_ns1__settings_mtinstances_instance, sizeof(_ns1__settings_mtinstances_instance), 0))
				break;
			if (!soap_in__ns1__settings_mtinstances_instance(soap, tag, NULL, ""))
				break;
		}
		else if (!soap_in__ns1__settings_mtinstances_instance(soap, tag, &n, ""))
			break;
		if (!a && !(a = soap_new_std__vectorTemplateOf_ns1__settings_mtinstances_instance(soap, -1)))
			return NULL;
		soap_update_pointers(soap, (char*)&n, (char*)&n + sizeof(n), (char*)&(*a->insert(a->end(), n)), (char*)&n);
		if (!tag || *tag == '-')
			return a;
	}
	if (soap_flag && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
	{	soap->error = SOAP_OK;
		return a;
	}
	return NULL;
}

SOAP_FMAC1 std::vector<_ns1__settings_mtinstances_instance > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns1__settings_mtinstances_instance(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__vectorTemplateOf_ns1__settings_mtinstances_instance(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__vectorTemplateOf_ns1__settings_mtinstances_instance, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::vector<_ns1__settings_mtinstances_instance >);
		if (size)
			*size = sizeof(std::vector<_ns1__settings_mtinstances_instance >);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW_ARRAY(std::vector<_ns1__settings_mtinstances_instance >, n);
		if (size)
			*size = n * sizeof(std::vector<_ns1__settings_mtinstances_instance >);
	}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	if (!cp->ptr)
		soap->error = SOAP_EOM;
	return (std::vector<_ns1__settings_mtinstances_instance >*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns1__settings_mtinstances_instance(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)tt; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::vector<_ns1__settings_mtinstances_instance > %p -> %p\n", q, p));
	*(std::vector<_ns1__settings_mtinstances_instance >*)p = *(std::vector<_ns1__settings_mtinstances_instance >*)q;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
