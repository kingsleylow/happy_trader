/* soapH.h
   Generated by gSOAP 2.8.16 from auto\tmp.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under one of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapH_H
#define soapH_H
#include "soapStub.h"
#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap*, const void*, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap*);
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap*);
#endif

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void *SOAP_FMAC4 soap_getelement(struct soap*, int*);
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap*, const void*, const char*, int, int);

#ifdef __cplusplus
}
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap*);

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap);

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap*, int, const char*, const char*, size_t*);
SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist*);
SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap*, const char*, void*, int, size_t, const char*, const char*);

SOAP_FMAC3 void* SOAP_FMAC4 soap_container_id_forward(struct soap*, const char*, void*, size_t, int, int, size_t, unsigned int);

SOAP_FMAC3 void SOAP_FMAC4 soap_container_insert(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_byte
#define SOAP_TYPE_byte (3)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap*, char *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap*, const char*, int, const char *, const char*);
SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap*, const char*, char *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap*, const char *, const char*, const char*);

#ifndef soap_write_byte
#define soap_write_byte(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_byte(soap, data),0) || soap_put_byte(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap*, char *, const char*, const char*);

#ifndef soap_read_byte
#define soap_read_byte(soap, data) ( soap_begin_recv(soap) || !soap_get_byte(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_int
#define SOAP_TYPE_int (1)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap*, int *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap*, const char*, int, const int *, const char*);
SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap*, const char*, int *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap*, const int *, const char*, const char*);

#ifndef soap_write_int
#define soap_write_int(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_int(soap, data),0) || soap_put_int(soap, data, "int", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap*, int *, const char*, const char*);

#ifndef soap_read_int
#define soap_read_int(soap, data) ( soap_begin_recv(soap) || !soap_get_int(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__ns1__settings_generalparams_eventpluginparams_entry
#define SOAP_TYPE__ns1__settings_generalparams_eventpluginparams_entry (18)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__settings_generalparams_eventpluginparams_entry(struct soap*, const char*, int, const _ns1__settings_generalparams_eventpluginparams_entry *, const char*);
SOAP_FMAC3 _ns1__settings_generalparams_eventpluginparams_entry * SOAP_FMAC4 soap_in__ns1__settings_generalparams_eventpluginparams_entry(struct soap*, const char*, _ns1__settings_generalparams_eventpluginparams_entry *, const char*);

#ifndef soap_write__ns1__settings_generalparams_eventpluginparams_entry
#define soap_write__ns1__settings_generalparams_eventpluginparams_entry(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:settings-generalparams-eventpluginparams-entry", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__settings_generalparams_eventpluginparams_entry * SOAP_FMAC4 soap_get__ns1__settings_generalparams_eventpluginparams_entry(struct soap*, _ns1__settings_generalparams_eventpluginparams_entry *, const char*, const char*);

#ifndef soap_read__ns1__settings_generalparams_eventpluginparams_entry
#define soap_read__ns1__settings_generalparams_eventpluginparams_entry(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__settings_generalparams_eventpluginparams_entry(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__settings_generalparams_eventpluginparams_entry * SOAP_FMAC2 soap_instantiate__ns1__settings_generalparams_eventpluginparams_entry(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__settings_generalparams_eventpluginparams_entry * soap_new__ns1__settings_generalparams_eventpluginparams_entry(struct soap *soap, int n = -1) { return soap_instantiate__ns1__settings_generalparams_eventpluginparams_entry(soap, n, NULL, NULL, NULL); }

inline _ns1__settings_generalparams_eventpluginparams_entry * soap_new_req__ns1__settings_generalparams_eventpluginparams_entry(struct soap *soap, std::string& name, std::string& value) { _ns1__settings_generalparams_eventpluginparams_entry *_p = soap_instantiate__ns1__settings_generalparams_eventpluginparams_entry(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__settings_generalparams_eventpluginparams_entry::name = name; _p->_ns1__settings_generalparams_eventpluginparams_entry::value = value; } return _p; }

inline _ns1__settings_generalparams_eventpluginparams_entry * soap_new_set__ns1__settings_generalparams_eventpluginparams_entry(struct soap *soap, std::string& name, std::string& value) { _ns1__settings_generalparams_eventpluginparams_entry *_p = soap_instantiate__ns1__settings_generalparams_eventpluginparams_entry(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__settings_generalparams_eventpluginparams_entry::name = name; _p->_ns1__settings_generalparams_eventpluginparams_entry::value = value; } return _p; }

inline void soap_delete__ns1__settings_generalparams_eventpluginparams_entry(struct soap *soap, _ns1__settings_generalparams_eventpluginparams_entry *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__settings_generalparams_eventpluginparams_entry(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__settings_generalparams_eventpluginparams
#define SOAP_TYPE__ns1__settings_generalparams_eventpluginparams (17)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__settings_generalparams_eventpluginparams(struct soap*, const char*, int, const _ns1__settings_generalparams_eventpluginparams *, const char*);
SOAP_FMAC3 _ns1__settings_generalparams_eventpluginparams * SOAP_FMAC4 soap_in__ns1__settings_generalparams_eventpluginparams(struct soap*, const char*, _ns1__settings_generalparams_eventpluginparams *, const char*);

#ifndef soap_write__ns1__settings_generalparams_eventpluginparams
#define soap_write__ns1__settings_generalparams_eventpluginparams(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:settings-generalparams-eventpluginparams", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__settings_generalparams_eventpluginparams * SOAP_FMAC4 soap_get__ns1__settings_generalparams_eventpluginparams(struct soap*, _ns1__settings_generalparams_eventpluginparams *, const char*, const char*);

#ifndef soap_read__ns1__settings_generalparams_eventpluginparams
#define soap_read__ns1__settings_generalparams_eventpluginparams(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__settings_generalparams_eventpluginparams(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__settings_generalparams_eventpluginparams * SOAP_FMAC2 soap_instantiate__ns1__settings_generalparams_eventpluginparams(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__settings_generalparams_eventpluginparams * soap_new__ns1__settings_generalparams_eventpluginparams(struct soap *soap, int n = -1) { return soap_instantiate__ns1__settings_generalparams_eventpluginparams(soap, n, NULL, NULL, NULL); }

inline _ns1__settings_generalparams_eventpluginparams * soap_new_req__ns1__settings_generalparams_eventpluginparams(struct soap *soap, std::vector<_ns1__settings_generalparams_eventpluginparams_entry >& entry) { _ns1__settings_generalparams_eventpluginparams *_p = soap_instantiate__ns1__settings_generalparams_eventpluginparams(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__settings_generalparams_eventpluginparams::entry = entry; } return _p; }

inline _ns1__settings_generalparams_eventpluginparams * soap_new_set__ns1__settings_generalparams_eventpluginparams(struct soap *soap, std::vector<_ns1__settings_generalparams_eventpluginparams_entry >& entry) { _ns1__settings_generalparams_eventpluginparams *_p = soap_instantiate__ns1__settings_generalparams_eventpluginparams(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__settings_generalparams_eventpluginparams::entry = entry; } return _p; }

inline void soap_delete__ns1__settings_generalparams_eventpluginparams(struct soap *soap, _ns1__settings_generalparams_eventpluginparams *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__settings_generalparams_eventpluginparams(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__settings_generalparams_htserver
#define SOAP_TYPE__ns1__settings_generalparams_htserver (16)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__settings_generalparams_htserver(struct soap*, const char*, int, const _ns1__settings_generalparams_htserver *, const char*);
SOAP_FMAC3 _ns1__settings_generalparams_htserver * SOAP_FMAC4 soap_in__ns1__settings_generalparams_htserver(struct soap*, const char*, _ns1__settings_generalparams_htserver *, const char*);

#ifndef soap_write__ns1__settings_generalparams_htserver
#define soap_write__ns1__settings_generalparams_htserver(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:settings-generalparams-htserver", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__settings_generalparams_htserver * SOAP_FMAC4 soap_get__ns1__settings_generalparams_htserver(struct soap*, _ns1__settings_generalparams_htserver *, const char*, const char*);

#ifndef soap_read__ns1__settings_generalparams_htserver
#define soap_read__ns1__settings_generalparams_htserver(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__settings_generalparams_htserver(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__settings_generalparams_htserver * SOAP_FMAC2 soap_instantiate__ns1__settings_generalparams_htserver(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__settings_generalparams_htserver * soap_new__ns1__settings_generalparams_htserver(struct soap *soap, int n = -1) { return soap_instantiate__ns1__settings_generalparams_htserver(soap, n, NULL, NULL, NULL); }

inline _ns1__settings_generalparams_htserver * soap_new_req__ns1__settings_generalparams_htserver(struct soap *soap, std::string& port, std::string& internalloglevel, std::string& eventlevel) { _ns1__settings_generalparams_htserver *_p = soap_instantiate__ns1__settings_generalparams_htserver(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__settings_generalparams_htserver::port = port; _p->_ns1__settings_generalparams_htserver::internalloglevel = internalloglevel; _p->_ns1__settings_generalparams_htserver::eventlevel = eventlevel; } return _p; }

inline _ns1__settings_generalparams_htserver * soap_new_set__ns1__settings_generalparams_htserver(struct soap *soap, std::string *debugconsole, std::string& port, std::string& internalloglevel, std::string& eventlevel) { _ns1__settings_generalparams_htserver *_p = soap_instantiate__ns1__settings_generalparams_htserver(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__settings_generalparams_htserver::debugconsole = debugconsole; _p->_ns1__settings_generalparams_htserver::port = port; _p->_ns1__settings_generalparams_htserver::internalloglevel = internalloglevel; _p->_ns1__settings_generalparams_htserver::eventlevel = eventlevel; } return _p; }

inline void soap_delete__ns1__settings_generalparams_htserver(struct soap *soap, _ns1__settings_generalparams_htserver *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__settings_generalparams_htserver(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__settings_generalparams
#define SOAP_TYPE__ns1__settings_generalparams (15)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__settings_generalparams(struct soap*, const char*, int, const _ns1__settings_generalparams *, const char*);
SOAP_FMAC3 _ns1__settings_generalparams * SOAP_FMAC4 soap_in__ns1__settings_generalparams(struct soap*, const char*, _ns1__settings_generalparams *, const char*);

#ifndef soap_write__ns1__settings_generalparams
#define soap_write__ns1__settings_generalparams(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:settings-generalparams", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__settings_generalparams * SOAP_FMAC4 soap_get__ns1__settings_generalparams(struct soap*, _ns1__settings_generalparams *, const char*, const char*);

#ifndef soap_read__ns1__settings_generalparams
#define soap_read__ns1__settings_generalparams(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__settings_generalparams(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__settings_generalparams * SOAP_FMAC2 soap_instantiate__ns1__settings_generalparams(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__settings_generalparams * soap_new__ns1__settings_generalparams(struct soap *soap, int n = -1) { return soap_instantiate__ns1__settings_generalparams(soap, n, NULL, NULL, NULL); }

inline _ns1__settings_generalparams * soap_new_req__ns1__settings_generalparams(struct soap *soap, _ns1__settings_generalparams_htserver& htserver, _ns1__settings_generalparams_eventpluginparams& eventpluginparams) { _ns1__settings_generalparams *_p = soap_instantiate__ns1__settings_generalparams(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__settings_generalparams::htserver = htserver; _p->_ns1__settings_generalparams::eventpluginparams = eventpluginparams; } return _p; }

inline _ns1__settings_generalparams * soap_new_set__ns1__settings_generalparams(struct soap *soap, _ns1__settings_generalparams_htserver& htserver, _ns1__settings_generalparams_eventpluginparams& eventpluginparams) { _ns1__settings_generalparams *_p = soap_instantiate__ns1__settings_generalparams(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__settings_generalparams::htserver = htserver; _p->_ns1__settings_generalparams::eventpluginparams = eventpluginparams; } return _p; }

inline void soap_delete__ns1__settings_generalparams(struct soap *soap, _ns1__settings_generalparams *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__settings_generalparams(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__settings_mtinstances_instance
#define SOAP_TYPE__ns1__settings_mtinstances_instance (12)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__settings_mtinstances_instance(struct soap*, const char*, int, const _ns1__settings_mtinstances_instance *, const char*);
SOAP_FMAC3 _ns1__settings_mtinstances_instance * SOAP_FMAC4 soap_in__ns1__settings_mtinstances_instance(struct soap*, const char*, _ns1__settings_mtinstances_instance *, const char*);

#ifndef soap_write__ns1__settings_mtinstances_instance
#define soap_write__ns1__settings_mtinstances_instance(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:settings-mtinstances-instance", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__settings_mtinstances_instance * SOAP_FMAC4 soap_get__ns1__settings_mtinstances_instance(struct soap*, _ns1__settings_mtinstances_instance *, const char*, const char*);

#ifndef soap_read__ns1__settings_mtinstances_instance
#define soap_read__ns1__settings_mtinstances_instance(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__settings_mtinstances_instance(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__settings_mtinstances_instance * SOAP_FMAC2 soap_instantiate__ns1__settings_mtinstances_instance(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__settings_mtinstances_instance * soap_new__ns1__settings_mtinstances_instance(struct soap *soap, int n = -1) { return soap_instantiate__ns1__settings_mtinstances_instance(soap, n, NULL, NULL, NULL); }

inline _ns1__settings_mtinstances_instance * soap_new_req__ns1__settings_mtinstances_instance(struct soap *soap, std::string& path, std::string& name, std::string& loadbalanced, std::string& companyid, std::string& mt_USCOREdistrib) { _ns1__settings_mtinstances_instance *_p = soap_instantiate__ns1__settings_mtinstances_instance(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__settings_mtinstances_instance::path = path; _p->_ns1__settings_mtinstances_instance::name = name; _p->_ns1__settings_mtinstances_instance::loadbalanced = loadbalanced; _p->_ns1__settings_mtinstances_instance::companyid = companyid; _p->_ns1__settings_mtinstances_instance::mt_USCOREdistrib = mt_USCOREdistrib; } return _p; }

inline _ns1__settings_mtinstances_instance * soap_new_set__ns1__settings_mtinstances_instance(struct soap *soap, std::string& path, std::string& name, std::string& loadbalanced, std::string *autorecover, std::string *autoinstall, std::string *autoload, std::string *autoqueuerestore, std::string& companyid, std::string& mt_USCOREdistrib) { _ns1__settings_mtinstances_instance *_p = soap_instantiate__ns1__settings_mtinstances_instance(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__settings_mtinstances_instance::path = path; _p->_ns1__settings_mtinstances_instance::name = name; _p->_ns1__settings_mtinstances_instance::loadbalanced = loadbalanced; _p->_ns1__settings_mtinstances_instance::autorecover = autorecover; _p->_ns1__settings_mtinstances_instance::autoinstall = autoinstall; _p->_ns1__settings_mtinstances_instance::autoload = autoload; _p->_ns1__settings_mtinstances_instance::autoqueuerestore = autoqueuerestore; _p->_ns1__settings_mtinstances_instance::companyid = companyid; _p->_ns1__settings_mtinstances_instance::mt_USCOREdistrib = mt_USCOREdistrib; } return _p; }

inline void soap_delete__ns1__settings_mtinstances_instance(struct soap *soap, _ns1__settings_mtinstances_instance *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__settings_mtinstances_instance(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__settings_mtinstances
#define SOAP_TYPE__ns1__settings_mtinstances (11)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__settings_mtinstances(struct soap*, const char*, int, const _ns1__settings_mtinstances *, const char*);
SOAP_FMAC3 _ns1__settings_mtinstances * SOAP_FMAC4 soap_in__ns1__settings_mtinstances(struct soap*, const char*, _ns1__settings_mtinstances *, const char*);

#ifndef soap_write__ns1__settings_mtinstances
#define soap_write__ns1__settings_mtinstances(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:settings-mtinstances", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__settings_mtinstances * SOAP_FMAC4 soap_get__ns1__settings_mtinstances(struct soap*, _ns1__settings_mtinstances *, const char*, const char*);

#ifndef soap_read__ns1__settings_mtinstances
#define soap_read__ns1__settings_mtinstances(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__settings_mtinstances(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__settings_mtinstances * SOAP_FMAC2 soap_instantiate__ns1__settings_mtinstances(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__settings_mtinstances * soap_new__ns1__settings_mtinstances(struct soap *soap, int n = -1) { return soap_instantiate__ns1__settings_mtinstances(soap, n, NULL, NULL, NULL); }

inline _ns1__settings_mtinstances * soap_new_req__ns1__settings_mtinstances(struct soap *soap, std::vector<_ns1__settings_mtinstances_instance >& instance) { _ns1__settings_mtinstances *_p = soap_instantiate__ns1__settings_mtinstances(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__settings_mtinstances::instance = instance; } return _p; }

inline _ns1__settings_mtinstances * soap_new_set__ns1__settings_mtinstances(struct soap *soap, std::vector<_ns1__settings_mtinstances_instance >& instance) { _ns1__settings_mtinstances *_p = soap_instantiate__ns1__settings_mtinstances(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__settings_mtinstances::instance = instance; } return _p; }

inline void soap_delete__ns1__settings_mtinstances(struct soap *soap, _ns1__settings_mtinstances *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__settings_mtinstances(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE__ns1__settings
#define SOAP_TYPE__ns1__settings (10)
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns1__settings(struct soap*, const char*, int, const _ns1__settings *, const char*);
SOAP_FMAC3 _ns1__settings * SOAP_FMAC4 soap_in__ns1__settings(struct soap*, const char*, _ns1__settings *, const char*);

#ifndef soap_write__ns1__settings
#define soap_write__ns1__settings(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || ((data)->soap_serialize(soap),0) || (data)->soap_put(soap, "ns1:settings", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 _ns1__settings * SOAP_FMAC4 soap_get__ns1__settings(struct soap*, _ns1__settings *, const char*, const char*);

#ifndef soap_read__ns1__settings
#define soap_read__ns1__settings(soap, data) ( soap_begin_recv(soap) || !soap_get__ns1__settings(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 _ns1__settings * SOAP_FMAC2 soap_instantiate__ns1__settings(struct soap*, int, const char*, const char*, size_t*);

inline _ns1__settings * soap_new__ns1__settings(struct soap *soap, int n = -1) { return soap_instantiate__ns1__settings(soap, n, NULL, NULL, NULL); }

inline _ns1__settings * soap_new_req__ns1__settings(struct soap *soap, std::string& mt4loglevel, std::string& heartbeatjavahtsec, std::string& mt4datareadintrvalsec, std::string& zombiemt4killer, _ns1__settings_mtinstances& mtinstances, _ns1__settings_generalparams& generalparams) { _ns1__settings *_p = soap_instantiate__ns1__settings(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__settings::mt4loglevel = mt4loglevel; _p->_ns1__settings::heartbeatjavahtsec = heartbeatjavahtsec; _p->_ns1__settings::mt4datareadintrvalsec = mt4datareadintrvalsec; _p->_ns1__settings::zombiemt4killer = zombiemt4killer; _p->_ns1__settings::mtinstances = mtinstances; _p->_ns1__settings::generalparams = generalparams; } return _p; }

inline _ns1__settings * soap_new_set__ns1__settings(struct soap *soap, std::string& mt4loglevel, std::string& heartbeatjavahtsec, std::string& mt4datareadintrvalsec, std::string& zombiemt4killer, _ns1__settings_mtinstances& mtinstances, _ns1__settings_generalparams& generalparams) { _ns1__settings *_p = soap_instantiate__ns1__settings(soap, -1, NULL, NULL, NULL); if (_p) { _p->soap_default(soap); _p->_ns1__settings::mt4loglevel = mt4loglevel; _p->_ns1__settings::heartbeatjavahtsec = heartbeatjavahtsec; _p->_ns1__settings::mt4datareadintrvalsec = mt4datareadintrvalsec; _p->_ns1__settings::zombiemt4killer = zombiemt4killer; _p->_ns1__settings::mtinstances = mtinstances; _p->_ns1__settings::generalparams = generalparams; } return _p; }

inline void soap_delete__ns1__settings(struct soap *soap, _ns1__settings *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns1__settings(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_xsd__integer
#define SOAP_TYPE_xsd__integer (9)
#endif

#define soap_default_xsd__integer(soap, a) soap_default_std__string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_xsd__integer(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__integer(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_xsd__integer(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__integer(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_xsd__integer
#define soap_write_xsd__integer(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_xsd__integer(soap, data),0) || soap_put_xsd__integer(soap, data, "xsd:integer", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_xsd__integer(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_xsd__integer
#define soap_read_xsd__integer(soap, data) ( soap_begin_recv(soap) || !soap_get_xsd__integer(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#define soap_instantiate_xsd__integer soap_instantiate_std__string


#define soap_copy_xsd__integer soap_copy_std__string

#ifndef SOAP_TYPE_std__string
#define SOAP_TYPE_std__string (8)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__string(struct soap*, std::string *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__string(struct soap*, const std::string *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__string(struct soap*, const char*, int, const std::string*, const char*);
SOAP_FMAC3 std::string * SOAP_FMAC4 soap_in_std__string(struct soap*, const char*, std::string*, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__string(struct soap*, const std::string *, const char*, const char*);

#ifndef soap_write_std__string
#define soap_write_std__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_std__string(soap, data),0) || soap_put_std__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string * SOAP_FMAC4 soap_get_std__string(struct soap*, std::string *, const char*, const char*);

#ifndef soap_read_std__string
#define soap_read_std__string(soap, data) ( soap_begin_recv(soap) || !soap_get_std__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 std::string * SOAP_FMAC2 soap_instantiate_std__string(struct soap*, int, const char*, const char*, size_t*);

inline std::string * soap_new_std__string(struct soap *soap, int n = -1) { return soap_instantiate_std__string(soap, n, NULL, NULL, NULL); }

inline std::string * soap_new_req_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline std::string * soap_new_set_std__string(struct soap *soap) { std::string *_p = soap_instantiate_std__string(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_std__string(soap, _p); } return _p; }

inline void soap_delete_std__string(struct soap *soap, std::string *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__string(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (28)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap*, const char*, int, const struct SOAP_ENV__Fault *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap*, const char*, struct SOAP_ENV__Fault *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap*, const struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Fault
#define soap_write_SOAP_ENV__Fault(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Fault(soap, data),0) || soap_put_SOAP_ENV__Fault(soap, data, "SOAP-ENV:Fault", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap*, struct SOAP_ENV__Fault *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Fault
#define soap_read_SOAP_ENV__Fault(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Fault(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Fault * soap_new_SOAP_ENV__Fault(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Fault(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Fault * soap_new_req_SOAP_ENV__Fault(struct soap *soap) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); } return _p; }

inline struct SOAP_ENV__Fault * soap_new_set_SOAP_ENV__Fault(struct soap *soap, char *faultcode, char *faultstring, char *faultactor, struct SOAP_ENV__Detail *detail, struct SOAP_ENV__Code *SOAP_ENV__Code, struct SOAP_ENV__Reason *SOAP_ENV__Reason, char *SOAP_ENV__Node, char *SOAP_ENV__Role, struct SOAP_ENV__Detail *SOAP_ENV__Detail) { struct SOAP_ENV__Fault *_p = soap_instantiate_SOAP_ENV__Fault(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Fault(soap, _p); _p->faultcode = faultcode; _p->faultstring = faultstring; _p->faultactor = faultactor; _p->detail = detail; _p->SOAP_ENV__Code = SOAP_ENV__Code; _p->SOAP_ENV__Reason = SOAP_ENV__Reason; _p->SOAP_ENV__Node = SOAP_ENV__Node; _p->SOAP_ENV__Role = SOAP_ENV__Role; _p->SOAP_ENV__Detail = SOAP_ENV__Detail; } return _p; }

inline void soap_delete_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (27)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap*, const char*, int, const struct SOAP_ENV__Reason *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap*, const struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Reason
#define soap_write_SOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Reason(soap, data),0) || soap_put_SOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Reason
#define soap_read_SOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Reason * soap_new_SOAP_ENV__Reason(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Reason(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Reason * soap_new_req_SOAP_ENV__Reason(struct soap *soap) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); } return _p; }

inline struct SOAP_ENV__Reason * soap_new_set_SOAP_ENV__Reason(struct soap *soap, char *SOAP_ENV__Text) { struct SOAP_ENV__Reason *_p = soap_instantiate_SOAP_ENV__Reason(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Reason(soap, _p); _p->SOAP_ENV__Text = SOAP_ENV__Text; } return _p; }

inline void soap_delete_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (24)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap*, const char*, int, const struct SOAP_ENV__Detail *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap*, const struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Detail
#define soap_write_SOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Detail(soap, data),0) || soap_put_SOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Detail
#define soap_read_SOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Detail * soap_new_SOAP_ENV__Detail(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Detail(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Detail * soap_new_req_SOAP_ENV__Detail(struct soap *soap, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__type = __type; _p->fault = fault; } return _p; }

inline struct SOAP_ENV__Detail * soap_new_set_SOAP_ENV__Detail(struct soap *soap, char *__any, int __type, void *fault) { struct SOAP_ENV__Detail *_p = soap_instantiate_SOAP_ENV__Detail(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Detail(soap, _p); _p->__any = __any; _p->__type = __type; _p->fault = fault; } return _p; }

inline void soap_delete_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (22)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap*, const char*, int, const struct SOAP_ENV__Code *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap*, const struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Code
#define soap_write_SOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Code(soap, data),0) || soap_put_SOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Code
#define soap_read_SOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Code * soap_new_SOAP_ENV__Code(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Code(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Code * soap_new_req_SOAP_ENV__Code(struct soap *soap) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); } return _p; }

inline struct SOAP_ENV__Code * soap_new_set_SOAP_ENV__Code(struct soap *soap, char *SOAP_ENV__Value, struct SOAP_ENV__Code *SOAP_ENV__Subcode) { struct SOAP_ENV__Code *_p = soap_instantiate_SOAP_ENV__Code(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Code(soap, _p); _p->SOAP_ENV__Value = SOAP_ENV__Value; _p->SOAP_ENV__Subcode = SOAP_ENV__Subcode; } return _p; }

inline void soap_delete_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (21)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap*, const char*, int, const struct SOAP_ENV__Header *, const char*);
SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap*, const char*, struct SOAP_ENV__Header *, const char*);

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap*, const struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_write_SOAP_ENV__Header
#define soap_write_SOAP_ENV__Header(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_SOAP_ENV__Header(soap, data),0) || soap_put_SOAP_ENV__Header(soap, data, "SOAP-ENV:Header", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap*, struct SOAP_ENV__Header *, const char*, const char*);

#ifndef soap_read_SOAP_ENV__Header
#define soap_read_SOAP_ENV__Header(soap, data) ( soap_begin_recv(soap) || !soap_get_SOAP_ENV__Header(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap*, int, const char*, const char*, size_t*);

inline struct SOAP_ENV__Header * soap_new_SOAP_ENV__Header(struct soap *soap, int n = -1) { return soap_instantiate_SOAP_ENV__Header(soap, n, NULL, NULL, NULL); }

inline struct SOAP_ENV__Header * soap_new_req_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline struct SOAP_ENV__Header * soap_new_set_SOAP_ENV__Header(struct soap *soap) { struct SOAP_ENV__Header *_p = soap_instantiate_SOAP_ENV__Header(soap, -1, NULL, NULL, NULL); if (_p) { soap_default_SOAP_ENV__Header(soap, _p); } return _p; }

inline void soap_delete_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Reason
#define SOAP_TYPE_PointerToSOAP_ENV__Reason (30)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap*, const char *, int, struct SOAP_ENV__Reason *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap*, const char*, struct SOAP_ENV__Reason **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Reason
#define soap_write_PointerToSOAP_ENV__Reason(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Reason(soap, data),0) || soap_put_PointerToSOAP_ENV__Reason(soap, data, "SOAP-ENV:Reason", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap*, struct SOAP_ENV__Reason **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Reason
#define soap_read_PointerToSOAP_ENV__Reason(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Reason(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Detail
#define SOAP_TYPE_PointerToSOAP_ENV__Detail (29)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap*, const char *, int, struct SOAP_ENV__Detail *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap*, const char*, struct SOAP_ENV__Detail **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Detail
#define soap_write_PointerToSOAP_ENV__Detail(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Detail(soap, data),0) || soap_put_PointerToSOAP_ENV__Detail(soap, data, "SOAP-ENV:Detail", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap*, struct SOAP_ENV__Detail **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Detail
#define soap_read_PointerToSOAP_ENV__Detail(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Detail(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef WITH_NOGLOBAL

#ifndef SOAP_TYPE_PointerToSOAP_ENV__Code
#define SOAP_TYPE_PointerToSOAP_ENV__Code (23)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap*, const char *, int, struct SOAP_ENV__Code *const*, const char *);
SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap*, const char*, struct SOAP_ENV__Code **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code *const*, const char*, const char*);

#ifndef soap_write_PointerToSOAP_ENV__Code
#define soap_write_PointerToSOAP_ENV__Code(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerToSOAP_ENV__Code(soap, data),0) || soap_put_PointerToSOAP_ENV__Code(soap, data, "SOAP-ENV:Code", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap*, struct SOAP_ENV__Code **, const char*, const char*);

#ifndef soap_read_PointerToSOAP_ENV__Code
#define soap_read_PointerToSOAP_ENV__Code(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerToSOAP_ENV__Code(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#endif

#ifndef SOAP_TYPE_PointerTostd__string
#define SOAP_TYPE_PointerTostd__string (13)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__string(struct soap*, std::string *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__string(struct soap*, const char *, int, std::string *const*, const char *);
SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_in_PointerTostd__string(struct soap*, const char*, std::string **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__string(struct soap*, std::string *const*, const char*, const char*);

#ifndef soap_write_PointerTostd__string
#define soap_write_PointerTostd__string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_PointerTostd__string(soap, data),0) || soap_put_PointerTostd__string(soap, data, "string", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 std::string ** SOAP_FMAC4 soap_get_PointerTostd__string(struct soap*, std::string **, const char*, const char*);

#ifndef soap_read_PointerTostd__string
#define soap_read_PointerTostd__string(soap, data) ( soap_begin_recv(soap) || !soap_get_PointerTostd__string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
#endif

#define soap_default__QName(soap, a) soap_default_string(soap, a)

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize__QName(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write__QName
#define soap_write__QName(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize__QName(soap, data),0) || soap_put__QName(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap*, char **, const char*, const char*);

#ifndef soap_read__QName
#define soap_read__QName(soap, data) ( soap_begin_recv(soap) || !soap_get__QName(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_string
#define SOAP_TYPE_string (4)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap*, char **);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap*, char *const*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap*, const char*, int, char*const*, const char*);
SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap*, const char*, char **, const char*);
SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap*, char *const*, const char*, const char*);

#ifndef soap_write_string
#define soap_write_string(soap, data) ( soap_free_temp(soap), soap_begin_send(soap) || (soap_serialize_string(soap, data),0) || soap_put_string(soap, data, "byte", NULL) || soap_end_send(soap), (soap)->error )
#endif

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap*, char **, const char*, const char*);

#ifndef soap_read_string
#define soap_read_string(soap, data) ( soap_begin_recv(soap) || !soap_get_string(soap, data, NULL, NULL) || soap_end_recv(soap), (soap)->error )
#endif


#ifndef SOAP_TYPE_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry
#define SOAP_TYPE_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry (19)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(struct soap*, std::vector<_ns1__settings_generalparams_eventpluginparams_entry >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(struct soap*, const std::vector<_ns1__settings_generalparams_eventpluginparams_entry >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(struct soap*, const char*, int, const std::vector<_ns1__settings_generalparams_eventpluginparams_entry >*, const char*);
SOAP_FMAC3 std::vector<_ns1__settings_generalparams_eventpluginparams_entry >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(struct soap*, const char*, std::vector<_ns1__settings_generalparams_eventpluginparams_entry >*, const char*);
SOAP_FMAC1 std::vector<_ns1__settings_generalparams_eventpluginparams_entry > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns1__settings_generalparams_eventpluginparams_entry > * soap_new_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(struct soap *soap, std::vector<_ns1__settings_generalparams_eventpluginparams_entry >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns1__settings_generalparams_eventpluginparams_entry(struct soap*, int, int, void*, size_t, const void*, size_t);

#ifndef SOAP_TYPE_std__vectorTemplateOf_ns1__settings_mtinstances_instance
#define SOAP_TYPE_std__vectorTemplateOf_ns1__settings_mtinstances_instance (14)
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__vectorTemplateOf_ns1__settings_mtinstances_instance(struct soap*, std::vector<_ns1__settings_mtinstances_instance >*);
SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__vectorTemplateOf_ns1__settings_mtinstances_instance(struct soap*, const std::vector<_ns1__settings_mtinstances_instance >*);
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__vectorTemplateOf_ns1__settings_mtinstances_instance(struct soap*, const char*, int, const std::vector<_ns1__settings_mtinstances_instance >*, const char*);
SOAP_FMAC3 std::vector<_ns1__settings_mtinstances_instance >* SOAP_FMAC4 soap_in_std__vectorTemplateOf_ns1__settings_mtinstances_instance(struct soap*, const char*, std::vector<_ns1__settings_mtinstances_instance >*, const char*);
SOAP_FMAC1 std::vector<_ns1__settings_mtinstances_instance > * SOAP_FMAC2 soap_instantiate_std__vectorTemplateOf_ns1__settings_mtinstances_instance(struct soap*, int, const char*, const char*, size_t*);

inline std::vector<_ns1__settings_mtinstances_instance > * soap_new_std__vectorTemplateOf_ns1__settings_mtinstances_instance(struct soap *soap, int n = -1) { return soap_instantiate_std__vectorTemplateOf_ns1__settings_mtinstances_instance(soap, n, NULL, NULL, NULL); }

inline void soap_delete_std__vectorTemplateOf_ns1__settings_mtinstances_instance(struct soap *soap, std::vector<_ns1__settings_mtinstances_instance >*p) { soap_delete(soap, p); }

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__vectorTemplateOf_ns1__settings_mtinstances_instance(struct soap*, int, int, void*, size_t, const void*, size_t);

#endif

/* End of soapH.h */
