#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=4.0.30319.33440.
// 
using namespace System;
ref class NewDataSet;


/// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
[System::Serializable, 
System::ComponentModel::DesignerCategoryAttribute(L"code"), 
System::ComponentModel::ToolboxItem(true), 
System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
System::Xml::Serialization::XmlRootAttribute(L"NewDataSet"), 
System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
public ref class NewDataSet : public ::System::Data::DataSet {
    public : ref class settingsDataTable;
    public : ref class mtinstancesDataTable;
    public : ref class instanceDataTable;
    public : ref class generalparamsDataTable;
    public : ref class htserverDataTable;
    public : ref class eventpluginparamsDataTable;
    public : ref class entryDataTable;
    public : ref class settingsRow;
    public : ref class mtinstancesRow;
    public : ref class instanceRow;
    public : ref class generalparamsRow;
    public : ref class htserverRow;
    public : ref class eventpluginparamsRow;
    public : ref class entryRow;
    public : ref class settingsRowChangeEvent;
    public : ref class mtinstancesRowChangeEvent;
    public : ref class instanceRowChangeEvent;
    public : ref class generalparamsRowChangeEvent;
    public : ref class htserverRowChangeEvent;
    public : ref class eventpluginparamsRowChangeEvent;
    public : ref class entryRowChangeEvent;
    
    private: NewDataSet::settingsDataTable^  tablesettings;
    
    private: NewDataSet::mtinstancesDataTable^  tablemtinstances;
    
    private: NewDataSet::instanceDataTable^  tableinstance;
    
    private: NewDataSet::generalparamsDataTable^  tablegeneralparams;
    
    private: NewDataSet::htserverDataTable^  tablehtserver;
    
    private: NewDataSet::eventpluginparamsDataTable^  tableeventpluginparams;
    
    private: NewDataSet::entryDataTable^  tableentry;
    
    private: ::System::Data::DataRelation^  relationsettings_mtinstances;
    
    private: ::System::Data::DataRelation^  relationmtinstances_instance;
    
    private: ::System::Data::DataRelation^  relationsettings_generalparams;
    
    private: ::System::Data::DataRelation^  relationgeneralparams_htserver;
    
    private: ::System::Data::DataRelation^  relationgeneralparams_eventpluginparams;
    
    private: ::System::Data::DataRelation^  relationeventpluginparams_entry;
    
    private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void settingsRowChangeEventHandler(::System::Object^  sender, NewDataSet::settingsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void mtinstancesRowChangeEventHandler(::System::Object^  sender, NewDataSet::mtinstancesRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void instanceRowChangeEventHandler(::System::Object^  sender, NewDataSet::instanceRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void generalparamsRowChangeEventHandler(::System::Object^  sender, NewDataSet::generalparamsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void htserverRowChangeEventHandler(::System::Object^  sender, NewDataSet::htserverRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void eventpluginparamsRowChangeEventHandler(::System::Object^  sender, NewDataSet::eventpluginparamsRowChangeEvent^  e);
    
    public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    delegate System::Void entryRowChangeEventHandler(::System::Object^  sender, NewDataSet::entryRowChangeEvent^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    NewDataSet();
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::settingsDataTable^  settings {
        NewDataSet::settingsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::mtinstancesDataTable^  mtinstances {
        NewDataSet::mtinstancesDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::instanceDataTable^  instance {
        NewDataSet::instanceDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::generalparamsDataTable^  generalparams {
        NewDataSet::generalparamsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::htserverDataTable^  htserver {
        NewDataSet::htserverDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::eventpluginparamsDataTable^  eventpluginparams {
        NewDataSet::eventpluginparamsDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::Browsable(false), 
    System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
    property NewDataSet::entryDataTable^  entry {
        NewDataSet::entryDataTable^  get();
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::BrowsableAttribute(true), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
    virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
        ::System::Data::SchemaSerializationMode get() override;
        System::Void set(::System::Data::SchemaSerializationMode value) override;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataTableCollection^  Tables {
        ::System::Data::DataTableCollection^  get() new;
    }
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
    System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
    System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
    property ::System::Data::DataRelationCollection^  Relations {
        ::System::Data::DataRelationCollection^  get() new;
    }
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void InitializeDerivedDataSet() override;
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Data::DataSet^  Clone() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeTables() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Boolean ShouldSerializeRelations() override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
    
    protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars();
    
    internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitVars(::System::Boolean initTable);
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void InitClass();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializesettings();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializemtinstances();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeinstance();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializegeneralparams();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializehtserver();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeeventpluginparams();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Boolean ShouldSerializeentry();
    
    private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
    
    public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class settingsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnmt4loglevel;
        
        private: ::System::Data::DataColumn^  columnheartbeatjavahtsec;
        
        private: ::System::Data::DataColumn^  columnmt4datareadintrvalsec;
        
        private: ::System::Data::DataColumn^  columnzombiemt4killer;
        
        private: ::System::Data::DataColumn^  columnsettings_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::settingsRowChangeEventHandler^  settingsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::settingsRowChangeEventHandler^  settingsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::settingsRowChangeEventHandler^  settingsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::settingsRowChangeEventHandler^  settingsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        settingsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        settingsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        settingsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  mt4loglevelColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  heartbeatjavahtsecColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  mt4datareadintrvalsecColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  zombiemt4killerColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  settings_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::settingsRow^  default [::System::Int32 ] {
            NewDataSet::settingsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddsettingsRow(NewDataSet::settingsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::settingsRow^  AddsettingsRow(System::Int64 mt4loglevel, System::Int64 heartbeatjavahtsec, System::Int64 mt4datareadintrvalsec, 
                    System::Int64 zombiemt4killer);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::settingsRow^  NewsettingsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovesettingsRow(NewDataSet::settingsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class mtinstancesDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnmtinstances_Id;
        
        private: ::System::Data::DataColumn^  columnsettings_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::mtinstancesRowChangeEventHandler^  mtinstancesRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::mtinstancesRowChangeEventHandler^  mtinstancesRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::mtinstancesRowChangeEventHandler^  mtinstancesRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::mtinstancesRowChangeEventHandler^  mtinstancesRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        mtinstancesDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        mtinstancesDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        mtinstancesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  mtinstances_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  settings_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::mtinstancesRow^  default [::System::Int32 ] {
            NewDataSet::mtinstancesRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddmtinstancesRow(NewDataSet::mtinstancesRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::mtinstancesRow^  AddmtinstancesRow(NewDataSet::settingsRow^  parentsettingsRowBysettings_mtinstances);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::mtinstancesRow^  NewmtinstancesRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovemtinstancesRow(NewDataSet::mtinstancesRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class instanceDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnpath;
        
        private: ::System::Data::DataColumn^  columnname;
        
        private: ::System::Data::DataColumn^  columnloadbalanced;
        
        private: ::System::Data::DataColumn^  columnautorecover;
        
        private: ::System::Data::DataColumn^  columnautoinstall;
        
        private: ::System::Data::DataColumn^  columnautoload;
        
        private: ::System::Data::DataColumn^  columnautoqueuerestore;
        
        private: ::System::Data::DataColumn^  columncompanyid;
        
        private: ::System::Data::DataColumn^  columnmt_distrib;
        
        private: ::System::Data::DataColumn^  columnmtinstances_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::instanceRowChangeEventHandler^  instanceRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::instanceRowChangeEventHandler^  instanceRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::instanceRowChangeEventHandler^  instanceRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::instanceRowChangeEventHandler^  instanceRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        instanceDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        instanceDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        instanceDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  pathColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  nameColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  loadbalancedColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  autorecoverColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  autoinstallColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  autoloadColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  autoqueuerestoreColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  companyidColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  mt_distribColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  mtinstances_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::instanceRow^  default [::System::Int32 ] {
            NewDataSet::instanceRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddinstanceRow(NewDataSet::instanceRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::instanceRow^  AddinstanceRow(
                    System::String^  path, 
                    System::String^  name, 
                    System::String^  loadbalanced, 
                    System::String^  autorecover, 
                    System::String^  autoinstall, 
                    System::String^  autoload, 
                    System::String^  autoqueuerestore, 
                    System::String^  companyid, 
                    System::String^  mt_distrib, 
                    NewDataSet::mtinstancesRow^  parentmtinstancesRowBymtinstances_instance);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::instanceRow^  NewinstanceRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveinstanceRow(NewDataSet::instanceRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class generalparamsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columngeneralparams_Id;
        
        private: ::System::Data::DataColumn^  columnsettings_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::generalparamsRowChangeEventHandler^  generalparamsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::generalparamsRowChangeEventHandler^  generalparamsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::generalparamsRowChangeEventHandler^  generalparamsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::generalparamsRowChangeEventHandler^  generalparamsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        generalparamsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        generalparamsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        generalparamsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  generalparams_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  settings_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::generalparamsRow^  default [::System::Int32 ] {
            NewDataSet::generalparamsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddgeneralparamsRow(NewDataSet::generalparamsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::generalparamsRow^  AddgeneralparamsRow(NewDataSet::settingsRow^  parentsettingsRowBysettings_generalparams);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::generalparamsRow^  NewgeneralparamsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovegeneralparamsRow(NewDataSet::generalparamsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class htserverDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columndebugconsole;
        
        private: ::System::Data::DataColumn^  columnport;
        
        private: ::System::Data::DataColumn^  columninternalloglevel;
        
        private: ::System::Data::DataColumn^  columneventlevel;
        
        private: ::System::Data::DataColumn^  columngeneralparams_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::htserverRowChangeEventHandler^  htserverRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::htserverRowChangeEventHandler^  htserverRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::htserverRowChangeEventHandler^  htserverRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::htserverRowChangeEventHandler^  htserverRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        htserverDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        htserverDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        htserverDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  debugconsoleColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  portColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  internalloglevelColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  eventlevelColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  generalparams_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::htserverRow^  default [::System::Int32 ] {
            NewDataSet::htserverRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddhtserverRow(NewDataSet::htserverRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::htserverRow^  AddhtserverRow(System::String^  debugconsole, System::Int64 port, System::Int64 internalloglevel, 
                    System::Int64 eventlevel, NewDataSet::generalparamsRow^  parentgeneralparamsRowBygeneralparams_htserver);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::htserverRow^  NewhtserverRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemovehtserverRow(NewDataSet::htserverRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class eventpluginparamsDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columneventpluginparams_Id;
        
        private: ::System::Data::DataColumn^  columngeneralparams_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::eventpluginparamsRowChangeEventHandler^  eventpluginparamsRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::eventpluginparamsRowChangeEventHandler^  eventpluginparamsRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::eventpluginparamsRowChangeEventHandler^  eventpluginparamsRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::eventpluginparamsRowChangeEventHandler^  eventpluginparamsRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        eventpluginparamsDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        eventpluginparamsDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        eventpluginparamsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  eventpluginparams_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  generalparams_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::eventpluginparamsRow^  default [::System::Int32 ] {
            NewDataSet::eventpluginparamsRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddeventpluginparamsRow(NewDataSet::eventpluginparamsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::eventpluginparamsRow^  AddeventpluginparamsRow(NewDataSet::generalparamsRow^  parentgeneralparamsRowBygeneralparams_eventpluginparams);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::eventpluginparamsRow^  NeweventpluginparamsRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveeventpluginparamsRow(NewDataSet::eventpluginparamsRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents the strongly named DataTable class.
///</summary>
    [System::Serializable, 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
    ref class entryDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
        
        private: ::System::Data::DataColumn^  columnname;
        
        private: ::System::Data::DataColumn^  column_value;
        
        private: ::System::Data::DataColumn^  columneventpluginparams_Id;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::entryRowChangeEventHandler^  entryRowChanging;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::entryRowChangeEventHandler^  entryRowChanged;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::entryRowChangeEventHandler^  entryRowDeleting;
        
        public: [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        event NewDataSet::entryRowChangeEventHandler^  entryRowDeleted;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        entryDataTable();
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        entryDataTable(::System::Data::DataTable^  table);
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        entryDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  nameColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  _valueColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataColumn^  eventpluginparams_IdColumn {
            ::System::Data::DataColumn^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0"), 
        System::ComponentModel::Browsable(false)]
        property ::System::Int32 Count {
            ::System::Int32 get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::entryRow^  default [::System::Int32 ] {
            NewDataSet::entryRow^  get(::System::Int32 index);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void AddentryRow(NewDataSet::entryRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::entryRow^  AddentryRow(System::String^  name, System::String^  _value, NewDataSet::eventpluginparamsRow^  parenteventpluginparamsRowByeventpluginparams_entry);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Collections::IEnumerator^  GetEnumerator();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataTable^  CreateInstance() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitVars();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void InitClass();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        NewDataSet::entryRow^  NewentryRow();
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Type^  GetRowType() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void RemoveentryRow(NewDataSet::entryRow^  row);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class settingsRow : public ::System::Data::DataRow {
        
        private: NewDataSet::settingsDataTable^  tablesettings;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        settingsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 mt4loglevel {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 heartbeatjavahtsec {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 mt4datareadintrvalsec {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 zombiemt4killer {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 settings_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::mtinstancesRow^  >^  GetmtinstancesRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::generalparamsRow^  >^  GetgeneralparamsRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class mtinstancesRow : public ::System::Data::DataRow {
        
        private: NewDataSet::mtinstancesDataTable^  tablemtinstances;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        mtinstancesRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 mtinstances_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 settings_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::settingsRow^  settingsRow {
            NewDataSet::settingsRow^  get();
            System::Void set(NewDataSet::settingsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Issettings_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setsettings_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::instanceRow^  >^  GetinstanceRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class instanceRow : public ::System::Data::DataRow {
        
        private: NewDataSet::instanceDataTable^  tableinstance;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        instanceRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  path {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  name {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  loadbalanced {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  autorecover {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  autoinstall {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  autoload {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  autoqueuerestore {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  companyid {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  mt_distrib {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 mtinstances_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::mtinstancesRow^  mtinstancesRow {
            NewDataSet::mtinstancesRow^  get();
            System::Void set(NewDataSet::mtinstancesRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsautorecoverNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetautorecoverNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsautoinstallNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetautoinstallNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsautoloadNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetautoloadNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsautoqueuerestoreNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetautoqueuerestoreNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Ismtinstances_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setmtinstances_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class generalparamsRow : public ::System::Data::DataRow {
        
        private: NewDataSet::generalparamsDataTable^  tablegeneralparams;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        generalparamsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 generalparams_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 settings_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::settingsRow^  settingsRow {
            NewDataSet::settingsRow^  get();
            System::Void set(NewDataSet::settingsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Issettings_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setsettings_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::htserverRow^  >^  GethtserverRows();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::eventpluginparamsRow^  >^  GeteventpluginparamsRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class htserverRow : public ::System::Data::DataRow {
        
        private: NewDataSet::htserverDataTable^  tablehtserver;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        htserverRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  debugconsole {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 port {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 internalloglevel {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int64 eventlevel {
            System::Int64 get();
            System::Void set(System::Int64 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 generalparams_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::generalparamsRow^  generalparamsRow {
            NewDataSet::generalparamsRow^  get();
            System::Void set(NewDataSet::generalparamsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean IsdebugconsoleNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void SetdebugconsoleNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isgeneralparams_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setgeneralparams_IdNull();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class eventpluginparamsRow : public ::System::Data::DataRow {
        
        private: NewDataSet::eventpluginparamsDataTable^  tableeventpluginparams;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        eventpluginparamsRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 eventpluginparams_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 generalparams_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::generalparamsRow^  generalparamsRow {
            NewDataSet::generalparamsRow^  get();
            System::Void set(NewDataSet::generalparamsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Isgeneralparams_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Setgeneralparams_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        cli::array< NewDataSet::entryRow^  >^  GetentryRows();
    };
    
    public : /// <summary>
///Represents strongly named DataRow class.
///</summary>
    ref class entryRow : public ::System::Data::DataRow {
        
        private: NewDataSet::entryDataTable^  tableentry;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        entryRow(::System::Data::DataRowBuilder^  rb);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  name {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::String^  _value {
            System::String^  get();
            System::Void set(System::String^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property System::Int32 eventpluginparams_Id {
            System::Int32 get();
            System::Void set(System::Int32 value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::eventpluginparamsRow^  eventpluginparamsRow {
            NewDataSet::eventpluginparamsRow^  get();
            System::Void set(NewDataSet::eventpluginparamsRow^  value);
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Boolean Iseventpluginparams_IdNull();
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        ::System::Void Seteventpluginparams_IdNull();
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class settingsRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::settingsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        settingsRowChangeEvent(NewDataSet::settingsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::settingsRow^  Row {
            NewDataSet::settingsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class mtinstancesRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::mtinstancesRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        mtinstancesRowChangeEvent(NewDataSet::mtinstancesRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::mtinstancesRow^  Row {
            NewDataSet::mtinstancesRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class instanceRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::instanceRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        instanceRowChangeEvent(NewDataSet::instanceRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::instanceRow^  Row {
            NewDataSet::instanceRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class generalparamsRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::generalparamsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        generalparamsRowChangeEvent(NewDataSet::generalparamsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::generalparamsRow^  Row {
            NewDataSet::generalparamsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class htserverRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::htserverRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        htserverRowChangeEvent(NewDataSet::htserverRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::htserverRow^  Row {
            NewDataSet::htserverRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class eventpluginparamsRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::eventpluginparamsRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        eventpluginparamsRowChangeEvent(NewDataSet::eventpluginparamsRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::eventpluginparamsRow^  Row {
            NewDataSet::eventpluginparamsRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
    
    public : /// <summary>
///Row event argument class
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
    ref class entryRowChangeEvent : public ::System::EventArgs {
        
        private: NewDataSet::entryRow^  eventRow;
        
        private: ::System::Data::DataRowAction eventAction;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        entryRowChangeEvent(NewDataSet::entryRow^  row, ::System::Data::DataRowAction action);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property NewDataSet::entryRow^  Row {
            NewDataSet::entryRow^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"4.0.0.0")]
        property ::System::Data::DataRowAction Action {
            ::System::Data::DataRowAction get();
        }
    };
};


inline NewDataSet::NewDataSet() {
    this->BeginInit();
    this->InitClass();
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    __super::Relations->CollectionChanged += schemaChangedHandler;
    this->EndInit();
}

inline NewDataSet::NewDataSet(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataSet(info, context, false) {
    if (this->IsBinarySerialized(info, context) == true) {
        this->InitVars(false);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
        this->Tables->CollectionChanged += schemaChangedHandler1;
        this->Relations->CollectionChanged += schemaChangedHandler1;
        return;
    }
    ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
    if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        if (ds->Tables[L"settings"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::settingsDataTable(ds->Tables[L"settings"])));
        }
        if (ds->Tables[L"mtinstances"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::mtinstancesDataTable(ds->Tables[L"mtinstances"])));
        }
        if (ds->Tables[L"instance"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::instanceDataTable(ds->Tables[L"instance"])));
        }
        if (ds->Tables[L"generalparams"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::generalparamsDataTable(ds->Tables[L"generalparams"])));
        }
        if (ds->Tables[L"htserver"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::htserverDataTable(ds->Tables[L"htserver"])));
        }
        if (ds->Tables[L"eventpluginparams"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::eventpluginparamsDataTable(ds->Tables[L"eventpluginparams"])));
        }
        if (ds->Tables[L"entry"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::entryDataTable(ds->Tables[L"entry"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
    }
    this->GetSerializationData(info, context);
    ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &NewDataSet::SchemaChanged);
    __super::Tables->CollectionChanged += schemaChangedHandler;
    this->Relations->CollectionChanged += schemaChangedHandler;
}

inline NewDataSet::settingsDataTable^  NewDataSet::settings::get() {
    return this->tablesettings;
}

inline NewDataSet::mtinstancesDataTable^  NewDataSet::mtinstances::get() {
    return this->tablemtinstances;
}

inline NewDataSet::instanceDataTable^  NewDataSet::instance::get() {
    return this->tableinstance;
}

inline NewDataSet::generalparamsDataTable^  NewDataSet::generalparams::get() {
    return this->tablegeneralparams;
}

inline NewDataSet::htserverDataTable^  NewDataSet::htserver::get() {
    return this->tablehtserver;
}

inline NewDataSet::eventpluginparamsDataTable^  NewDataSet::eventpluginparams::get() {
    return this->tableeventpluginparams;
}

inline NewDataSet::entryDataTable^  NewDataSet::entry::get() {
    return this->tableentry;
}

inline ::System::Data::SchemaSerializationMode NewDataSet::SchemaSerializationMode::get() {
    return this->_schemaSerializationMode;
}
inline System::Void NewDataSet::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
    this->_schemaSerializationMode = __identifier(value);
}

inline ::System::Data::DataTableCollection^  NewDataSet::Tables::get() {
    return __super::Tables;
}

inline ::System::Data::DataRelationCollection^  NewDataSet::Relations::get() {
    return __super::Relations;
}

inline ::System::Void NewDataSet::InitializeDerivedDataSet() {
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline ::System::Data::DataSet^  NewDataSet::Clone() {
    NewDataSet^  cln = (cli::safe_cast<NewDataSet^  >(__super::Clone()));
    cln->InitVars();
    cln->SchemaSerializationMode = this->SchemaSerializationMode;
    return cln;
}

inline ::System::Boolean NewDataSet::ShouldSerializeTables() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeRelations() {
    return false;
}

inline ::System::Void NewDataSet::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
    if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
        this->Reset();
        ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
        ds->ReadXml(reader);
        if (ds->Tables[L"settings"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::settingsDataTable(ds->Tables[L"settings"])));
        }
        if (ds->Tables[L"mtinstances"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::mtinstancesDataTable(ds->Tables[L"mtinstances"])));
        }
        if (ds->Tables[L"instance"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::instanceDataTable(ds->Tables[L"instance"])));
        }
        if (ds->Tables[L"generalparams"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::generalparamsDataTable(ds->Tables[L"generalparams"])));
        }
        if (ds->Tables[L"htserver"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::htserverDataTable(ds->Tables[L"htserver"])));
        }
        if (ds->Tables[L"eventpluginparams"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::eventpluginparamsDataTable(ds->Tables[L"eventpluginparams"])));
        }
        if (ds->Tables[L"entry"] != nullptr) {
            __super::Tables->Add((gcnew NewDataSet::entryDataTable(ds->Tables[L"entry"])));
        }
        this->DataSetName = ds->DataSetName;
        this->Prefix = ds->Prefix;
        this->Namespace = ds->Namespace;
        this->Locale = ds->Locale;
        this->CaseSensitive = ds->CaseSensitive;
        this->EnforceConstraints = ds->EnforceConstraints;
        this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
        this->InitVars();
    }
    else {
        this->ReadXml(reader);
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchema^  NewDataSet::GetSchemaSerializable() {
    ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
    this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
    stream->Position = 0;
    return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
}

inline ::System::Void NewDataSet::InitVars() {
    this->InitVars(true);
}

inline ::System::Void NewDataSet::InitVars(::System::Boolean initTable) {
    this->tablesettings = (cli::safe_cast<NewDataSet::settingsDataTable^  >(__super::Tables[L"settings"]));
    if (initTable == true) {
        if (this->tablesettings != nullptr) {
            this->tablesettings->InitVars();
        }
    }
    this->tablemtinstances = (cli::safe_cast<NewDataSet::mtinstancesDataTable^  >(__super::Tables[L"mtinstances"]));
    if (initTable == true) {
        if (this->tablemtinstances != nullptr) {
            this->tablemtinstances->InitVars();
        }
    }
    this->tableinstance = (cli::safe_cast<NewDataSet::instanceDataTable^  >(__super::Tables[L"instance"]));
    if (initTable == true) {
        if (this->tableinstance != nullptr) {
            this->tableinstance->InitVars();
        }
    }
    this->tablegeneralparams = (cli::safe_cast<NewDataSet::generalparamsDataTable^  >(__super::Tables[L"generalparams"]));
    if (initTable == true) {
        if (this->tablegeneralparams != nullptr) {
            this->tablegeneralparams->InitVars();
        }
    }
    this->tablehtserver = (cli::safe_cast<NewDataSet::htserverDataTable^  >(__super::Tables[L"htserver"]));
    if (initTable == true) {
        if (this->tablehtserver != nullptr) {
            this->tablehtserver->InitVars();
        }
    }
    this->tableeventpluginparams = (cli::safe_cast<NewDataSet::eventpluginparamsDataTable^  >(__super::Tables[L"eventpluginparams"]));
    if (initTable == true) {
        if (this->tableeventpluginparams != nullptr) {
            this->tableeventpluginparams->InitVars();
        }
    }
    this->tableentry = (cli::safe_cast<NewDataSet::entryDataTable^  >(__super::Tables[L"entry"]));
    if (initTable == true) {
        if (this->tableentry != nullptr) {
            this->tableentry->InitVars();
        }
    }
    this->relationsettings_mtinstances = this->Relations[L"settings_mtinstances"];
    this->relationmtinstances_instance = this->Relations[L"mtinstances_instance"];
    this->relationsettings_generalparams = this->Relations[L"settings_generalparams"];
    this->relationgeneralparams_htserver = this->Relations[L"generalparams_htserver"];
    this->relationgeneralparams_eventpluginparams = this->Relations[L"generalparams_eventpluginparams"];
    this->relationeventpluginparams_entry = this->Relations[L"eventpluginparams_entry"];
}

inline ::System::Void NewDataSet::InitClass() {
    this->DataSetName = L"NewDataSet";
    this->Prefix = L"";
    this->Namespace = L"http://www.foo.com";
    this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
    this->EnforceConstraints = true;
    this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
    this->tablesettings = (gcnew NewDataSet::settingsDataTable());
    __super::Tables->Add(this->tablesettings);
    this->tablemtinstances = (gcnew NewDataSet::mtinstancesDataTable());
    __super::Tables->Add(this->tablemtinstances);
    this->tableinstance = (gcnew NewDataSet::instanceDataTable());
    __super::Tables->Add(this->tableinstance);
    this->tablegeneralparams = (gcnew NewDataSet::generalparamsDataTable());
    __super::Tables->Add(this->tablegeneralparams);
    this->tablehtserver = (gcnew NewDataSet::htserverDataTable());
    __super::Tables->Add(this->tablehtserver);
    this->tableeventpluginparams = (gcnew NewDataSet::eventpluginparamsDataTable());
    __super::Tables->Add(this->tableeventpluginparams);
    this->tableentry = (gcnew NewDataSet::entryDataTable());
    __super::Tables->Add(this->tableentry);
    ::System::Data::ForeignKeyConstraint^  fkc;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"settings_mtinstances", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesettings->settings_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablemtinstances->settings_IdColumn}));
    this->tablemtinstances->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"mtinstances_instance", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablemtinstances->mtinstances_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinstance->mtinstances_IdColumn}));
    this->tableinstance->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"settings_generalparams", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesettings->settings_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablegeneralparams->settings_IdColumn}));
    this->tablegeneralparams->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"generalparams_htserver", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablegeneralparams->generalparams_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablehtserver->generalparams_IdColumn}));
    this->tablehtserver->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"generalparams_eventpluginparams", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablegeneralparams->generalparams_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableeventpluginparams->generalparams_IdColumn}));
    this->tableeventpluginparams->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"eventpluginparams_entry", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableeventpluginparams->eventpluginparams_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableentry->eventpluginparams_IdColumn}));
    this->tableentry->Constraints->Add(fkc);
    fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
    fkc->DeleteRule = ::System::Data::Rule::Cascade;
    fkc->UpdateRule = ::System::Data::Rule::Cascade;
    this->relationsettings_mtinstances = (gcnew ::System::Data::DataRelation(L"settings_mtinstances", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesettings->settings_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablemtinstances->settings_IdColumn}, false));
    this->relationsettings_mtinstances->Nested = true;
    this->Relations->Add(this->relationsettings_mtinstances);
    this->relationmtinstances_instance = (gcnew ::System::Data::DataRelation(L"mtinstances_instance", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablemtinstances->mtinstances_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableinstance->mtinstances_IdColumn}, false));
    this->relationmtinstances_instance->Nested = true;
    this->Relations->Add(this->relationmtinstances_instance);
    this->relationsettings_generalparams = (gcnew ::System::Data::DataRelation(L"settings_generalparams", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablesettings->settings_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablegeneralparams->settings_IdColumn}, false));
    this->relationsettings_generalparams->Nested = true;
    this->Relations->Add(this->relationsettings_generalparams);
    this->relationgeneralparams_htserver = (gcnew ::System::Data::DataRelation(L"generalparams_htserver", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablegeneralparams->generalparams_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablehtserver->generalparams_IdColumn}, false));
    this->relationgeneralparams_htserver->Nested = true;
    this->Relations->Add(this->relationgeneralparams_htserver);
    this->relationgeneralparams_eventpluginparams = (gcnew ::System::Data::DataRelation(L"generalparams_eventpluginparams", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablegeneralparams->generalparams_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableeventpluginparams->generalparams_IdColumn}, false));
    this->relationgeneralparams_eventpluginparams->Nested = true;
    this->Relations->Add(this->relationgeneralparams_eventpluginparams);
    this->relationeventpluginparams_entry = (gcnew ::System::Data::DataRelation(L"eventpluginparams_entry", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableeventpluginparams->eventpluginparams_IdColumn}, 
        gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableentry->eventpluginparams_IdColumn}, false));
    this->relationeventpluginparams_entry->Nested = true;
    this->Relations->Add(this->relationeventpluginparams_entry);
}

inline ::System::Boolean NewDataSet::ShouldSerializesettings() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializemtinstances() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeinstance() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializegeneralparams() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializehtserver() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeeventpluginparams() {
    return false;
}

inline ::System::Boolean NewDataSet::ShouldSerializeentry() {
    return false;
}

inline ::System::Void NewDataSet::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
    if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
        this->InitVars();
    }
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any->Namespace = ds->Namespace;
    sequence->Items->Add(any);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::settingsDataTable::settingsDataTable() {
    this->TableName = L"settings";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::settingsDataTable::settingsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::settingsDataTable::settingsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::settingsDataTable::mt4loglevelColumn::get() {
    return this->columnmt4loglevel;
}

inline ::System::Data::DataColumn^  NewDataSet::settingsDataTable::heartbeatjavahtsecColumn::get() {
    return this->columnheartbeatjavahtsec;
}

inline ::System::Data::DataColumn^  NewDataSet::settingsDataTable::mt4datareadintrvalsecColumn::get() {
    return this->columnmt4datareadintrvalsec;
}

inline ::System::Data::DataColumn^  NewDataSet::settingsDataTable::zombiemt4killerColumn::get() {
    return this->columnzombiemt4killer;
}

inline ::System::Data::DataColumn^  NewDataSet::settingsDataTable::settings_IdColumn::get() {
    return this->columnsettings_Id;
}

inline ::System::Int32 NewDataSet::settingsDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::settingsRow^  NewDataSet::settingsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::settingsRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::settingsDataTable::AddsettingsRow(NewDataSet::settingsRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::settingsRow^  NewDataSet::settingsDataTable::AddsettingsRow(System::Int64 mt4loglevel, System::Int64 heartbeatjavahtsec, 
            System::Int64 mt4datareadintrvalsec, System::Int64 zombiemt4killer) {
    NewDataSet::settingsRow^  rowsettingsRow = (cli::safe_cast<NewDataSet::settingsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {mt4loglevel, heartbeatjavahtsec, 
        mt4datareadintrvalsec, zombiemt4killer, nullptr};
    rowsettingsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowsettingsRow);
    return rowsettingsRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::settingsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::settingsDataTable::Clone() {
    NewDataSet::settingsDataTable^  cln = (cli::safe_cast<NewDataSet::settingsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::settingsDataTable::CreateInstance() {
    return (gcnew NewDataSet::settingsDataTable());
}

inline ::System::Void NewDataSet::settingsDataTable::InitVars() {
    this->columnmt4loglevel = __super::Columns[L"mt4loglevel"];
    this->columnheartbeatjavahtsec = __super::Columns[L"heartbeatjavahtsec"];
    this->columnmt4datareadintrvalsec = __super::Columns[L"mt4datareadintrvalsec"];
    this->columnzombiemt4killer = __super::Columns[L"zombiemt4killer"];
    this->columnsettings_Id = __super::Columns[L"settings_Id"];
}

inline ::System::Void NewDataSet::settingsDataTable::InitClass() {
    this->columnmt4loglevel = (gcnew ::System::Data::DataColumn(L"mt4loglevel", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnmt4loglevel);
    this->columnheartbeatjavahtsec = (gcnew ::System::Data::DataColumn(L"heartbeatjavahtsec", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnheartbeatjavahtsec);
    this->columnmt4datareadintrvalsec = (gcnew ::System::Data::DataColumn(L"mt4datareadintrvalsec", ::System::Int64::typeid, nullptr, 
        ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnmt4datareadintrvalsec);
    this->columnzombiemt4killer = (gcnew ::System::Data::DataColumn(L"zombiemt4killer", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnzombiemt4killer);
    this->columnsettings_Id = (gcnew ::System::Data::DataColumn(L"settings_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnsettings_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnsettings_Id}, 
            true)));
    this->columnmt4loglevel->AllowDBNull = false;
    this->columnheartbeatjavahtsec->AllowDBNull = false;
    this->columnmt4datareadintrvalsec->AllowDBNull = false;
    this->columnzombiemt4killer->AllowDBNull = false;
    this->columnsettings_Id->AutoIncrement = true;
    this->columnsettings_Id->AllowDBNull = false;
    this->columnsettings_Id->Unique = true;
}

inline NewDataSet::settingsRow^  NewDataSet::settingsDataTable::NewsettingsRow() {
    return (cli::safe_cast<NewDataSet::settingsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::settingsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::settingsRow(builder));
}

inline ::System::Type^  NewDataSet::settingsDataTable::GetRowType() {
    return NewDataSet::settingsRow::typeid;
}

inline ::System::Void NewDataSet::settingsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->settingsRowChanged(this, (gcnew NewDataSet::settingsRowChangeEvent((cli::safe_cast<NewDataSet::settingsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::settingsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->settingsRowChanging(this, (gcnew NewDataSet::settingsRowChangeEvent((cli::safe_cast<NewDataSet::settingsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::settingsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->settingsRowDeleted(this, (gcnew NewDataSet::settingsRowChangeEvent((cli::safe_cast<NewDataSet::settingsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::settingsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->settingsRowDeleting(this, (gcnew NewDataSet::settingsRowChangeEvent((cli::safe_cast<NewDataSet::settingsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::settingsDataTable::RemovesettingsRow(NewDataSet::settingsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::settingsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"settingsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::mtinstancesDataTable::mtinstancesDataTable() {
    this->TableName = L"mtinstances";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::mtinstancesDataTable::mtinstancesDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::mtinstancesDataTable::mtinstancesDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::mtinstancesDataTable::mtinstances_IdColumn::get() {
    return this->columnmtinstances_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::mtinstancesDataTable::settings_IdColumn::get() {
    return this->columnsettings_Id;
}

inline ::System::Int32 NewDataSet::mtinstancesDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::mtinstancesRow^  NewDataSet::mtinstancesDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::mtinstancesRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::mtinstancesDataTable::AddmtinstancesRow(NewDataSet::mtinstancesRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::mtinstancesRow^  NewDataSet::mtinstancesDataTable::AddmtinstancesRow(NewDataSet::settingsRow^  parentsettingsRowBysettings_mtinstances) {
    NewDataSet::mtinstancesRow^  rowmtinstancesRow = (cli::safe_cast<NewDataSet::mtinstancesRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentsettingsRowBysettings_mtinstances != nullptr) {
        columnValuesArray[1] = parentsettingsRowBysettings_mtinstances[4];
    }
    rowmtinstancesRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowmtinstancesRow);
    return rowmtinstancesRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::mtinstancesDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::mtinstancesDataTable::Clone() {
    NewDataSet::mtinstancesDataTable^  cln = (cli::safe_cast<NewDataSet::mtinstancesDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::mtinstancesDataTable::CreateInstance() {
    return (gcnew NewDataSet::mtinstancesDataTable());
}

inline ::System::Void NewDataSet::mtinstancesDataTable::InitVars() {
    this->columnmtinstances_Id = __super::Columns[L"mtinstances_Id"];
    this->columnsettings_Id = __super::Columns[L"settings_Id"];
}

inline ::System::Void NewDataSet::mtinstancesDataTable::InitClass() {
    this->columnmtinstances_Id = (gcnew ::System::Data::DataColumn(L"mtinstances_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnmtinstances_Id);
    this->columnsettings_Id = (gcnew ::System::Data::DataColumn(L"settings_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnsettings_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnmtinstances_Id}, 
            true)));
    this->columnmtinstances_Id->AutoIncrement = true;
    this->columnmtinstances_Id->AllowDBNull = false;
    this->columnmtinstances_Id->Unique = true;
}

inline NewDataSet::mtinstancesRow^  NewDataSet::mtinstancesDataTable::NewmtinstancesRow() {
    return (cli::safe_cast<NewDataSet::mtinstancesRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::mtinstancesDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::mtinstancesRow(builder));
}

inline ::System::Type^  NewDataSet::mtinstancesDataTable::GetRowType() {
    return NewDataSet::mtinstancesRow::typeid;
}

inline ::System::Void NewDataSet::mtinstancesDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->mtinstancesRowChanged(this, (gcnew NewDataSet::mtinstancesRowChangeEvent((cli::safe_cast<NewDataSet::mtinstancesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::mtinstancesDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->mtinstancesRowChanging(this, (gcnew NewDataSet::mtinstancesRowChangeEvent((cli::safe_cast<NewDataSet::mtinstancesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::mtinstancesDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->mtinstancesRowDeleted(this, (gcnew NewDataSet::mtinstancesRowChangeEvent((cli::safe_cast<NewDataSet::mtinstancesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::mtinstancesDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->mtinstancesRowDeleting(this, (gcnew NewDataSet::mtinstancesRowChangeEvent((cli::safe_cast<NewDataSet::mtinstancesRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::mtinstancesDataTable::RemovemtinstancesRow(NewDataSet::mtinstancesRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::mtinstancesDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"mtinstancesDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::instanceDataTable::instanceDataTable() {
    this->TableName = L"instance";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::instanceDataTable::instanceDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::instanceDataTable::instanceDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::instanceDataTable::pathColumn::get() {
    return this->columnpath;
}

inline ::System::Data::DataColumn^  NewDataSet::instanceDataTable::nameColumn::get() {
    return this->columnname;
}

inline ::System::Data::DataColumn^  NewDataSet::instanceDataTable::loadbalancedColumn::get() {
    return this->columnloadbalanced;
}

inline ::System::Data::DataColumn^  NewDataSet::instanceDataTable::autorecoverColumn::get() {
    return this->columnautorecover;
}

inline ::System::Data::DataColumn^  NewDataSet::instanceDataTable::autoinstallColumn::get() {
    return this->columnautoinstall;
}

inline ::System::Data::DataColumn^  NewDataSet::instanceDataTable::autoloadColumn::get() {
    return this->columnautoload;
}

inline ::System::Data::DataColumn^  NewDataSet::instanceDataTable::autoqueuerestoreColumn::get() {
    return this->columnautoqueuerestore;
}

inline ::System::Data::DataColumn^  NewDataSet::instanceDataTable::companyidColumn::get() {
    return this->columncompanyid;
}

inline ::System::Data::DataColumn^  NewDataSet::instanceDataTable::mt_distribColumn::get() {
    return this->columnmt_distrib;
}

inline ::System::Data::DataColumn^  NewDataSet::instanceDataTable::mtinstances_IdColumn::get() {
    return this->columnmtinstances_Id;
}

inline ::System::Int32 NewDataSet::instanceDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::instanceRow^  NewDataSet::instanceDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::instanceRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::instanceDataTable::AddinstanceRow(NewDataSet::instanceRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::instanceRow^  NewDataSet::instanceDataTable::AddinstanceRow(
            System::String^  path, 
            System::String^  name, 
            System::String^  loadbalanced, 
            System::String^  autorecover, 
            System::String^  autoinstall, 
            System::String^  autoload, 
            System::String^  autoqueuerestore, 
            System::String^  companyid, 
            System::String^  mt_distrib, 
            NewDataSet::mtinstancesRow^  parentmtinstancesRowBymtinstances_instance) {
    NewDataSet::instanceRow^  rowinstanceRow = (cli::safe_cast<NewDataSet::instanceRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(10) {path, name, loadbalanced, 
        autorecover, autoinstall, autoload, autoqueuerestore, companyid, mt_distrib, nullptr};
    if (parentmtinstancesRowBymtinstances_instance != nullptr) {
        columnValuesArray[9] = parentmtinstancesRowBymtinstances_instance[0];
    }
    rowinstanceRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowinstanceRow);
    return rowinstanceRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::instanceDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::instanceDataTable::Clone() {
    NewDataSet::instanceDataTable^  cln = (cli::safe_cast<NewDataSet::instanceDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::instanceDataTable::CreateInstance() {
    return (gcnew NewDataSet::instanceDataTable());
}

inline ::System::Void NewDataSet::instanceDataTable::InitVars() {
    this->columnpath = __super::Columns[L"path"];
    this->columnname = __super::Columns[L"name"];
    this->columnloadbalanced = __super::Columns[L"loadbalanced"];
    this->columnautorecover = __super::Columns[L"autorecover"];
    this->columnautoinstall = __super::Columns[L"autoinstall"];
    this->columnautoload = __super::Columns[L"autoload"];
    this->columnautoqueuerestore = __super::Columns[L"autoqueuerestore"];
    this->columncompanyid = __super::Columns[L"companyid"];
    this->columnmt_distrib = __super::Columns[L"mt_distrib"];
    this->columnmtinstances_Id = __super::Columns[L"mtinstances_Id"];
}

inline ::System::Void NewDataSet::instanceDataTable::InitClass() {
    this->columnpath = (gcnew ::System::Data::DataColumn(L"path", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnpath);
    this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnname);
    this->columnloadbalanced = (gcnew ::System::Data::DataColumn(L"loadbalanced", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnloadbalanced);
    this->columnautorecover = (gcnew ::System::Data::DataColumn(L"autorecover", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnautorecover);
    this->columnautoinstall = (gcnew ::System::Data::DataColumn(L"autoinstall", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnautoinstall);
    this->columnautoload = (gcnew ::System::Data::DataColumn(L"autoload", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnautoload);
    this->columnautoqueuerestore = (gcnew ::System::Data::DataColumn(L"autoqueuerestore", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnautoqueuerestore);
    this->columncompanyid = (gcnew ::System::Data::DataColumn(L"companyid", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columncompanyid);
    this->columnmt_distrib = (gcnew ::System::Data::DataColumn(L"mt_distrib", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnmt_distrib);
    this->columnmtinstances_Id = (gcnew ::System::Data::DataColumn(L"mtinstances_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnmtinstances_Id);
    this->columnpath->AllowDBNull = false;
    this->columnname->AllowDBNull = false;
    this->columnloadbalanced->AllowDBNull = false;
    this->columncompanyid->AllowDBNull = false;
    this->columnmt_distrib->AllowDBNull = false;
}

inline NewDataSet::instanceRow^  NewDataSet::instanceDataTable::NewinstanceRow() {
    return (cli::safe_cast<NewDataSet::instanceRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::instanceDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::instanceRow(builder));
}

inline ::System::Type^  NewDataSet::instanceDataTable::GetRowType() {
    return NewDataSet::instanceRow::typeid;
}

inline ::System::Void NewDataSet::instanceDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->instanceRowChanged(this, (gcnew NewDataSet::instanceRowChangeEvent((cli::safe_cast<NewDataSet::instanceRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::instanceDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->instanceRowChanging(this, (gcnew NewDataSet::instanceRowChangeEvent((cli::safe_cast<NewDataSet::instanceRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::instanceDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->instanceRowDeleted(this, (gcnew NewDataSet::instanceRowChangeEvent((cli::safe_cast<NewDataSet::instanceRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::instanceDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->instanceRowDeleting(this, (gcnew NewDataSet::instanceRowChangeEvent((cli::safe_cast<NewDataSet::instanceRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::instanceDataTable::RemoveinstanceRow(NewDataSet::instanceRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::instanceDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"instanceDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::generalparamsDataTable::generalparamsDataTable() {
    this->TableName = L"generalparams";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::generalparamsDataTable::generalparamsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::generalparamsDataTable::generalparamsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::generalparamsDataTable::generalparams_IdColumn::get() {
    return this->columngeneralparams_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::generalparamsDataTable::settings_IdColumn::get() {
    return this->columnsettings_Id;
}

inline ::System::Int32 NewDataSet::generalparamsDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::generalparamsRow^  NewDataSet::generalparamsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::generalparamsRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::generalparamsDataTable::AddgeneralparamsRow(NewDataSet::generalparamsRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::generalparamsRow^  NewDataSet::generalparamsDataTable::AddgeneralparamsRow(NewDataSet::settingsRow^  parentsettingsRowBysettings_generalparams) {
    NewDataSet::generalparamsRow^  rowgeneralparamsRow = (cli::safe_cast<NewDataSet::generalparamsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentsettingsRowBysettings_generalparams != nullptr) {
        columnValuesArray[1] = parentsettingsRowBysettings_generalparams[4];
    }
    rowgeneralparamsRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowgeneralparamsRow);
    return rowgeneralparamsRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::generalparamsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::generalparamsDataTable::Clone() {
    NewDataSet::generalparamsDataTable^  cln = (cli::safe_cast<NewDataSet::generalparamsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::generalparamsDataTable::CreateInstance() {
    return (gcnew NewDataSet::generalparamsDataTable());
}

inline ::System::Void NewDataSet::generalparamsDataTable::InitVars() {
    this->columngeneralparams_Id = __super::Columns[L"generalparams_Id"];
    this->columnsettings_Id = __super::Columns[L"settings_Id"];
}

inline ::System::Void NewDataSet::generalparamsDataTable::InitClass() {
    this->columngeneralparams_Id = (gcnew ::System::Data::DataColumn(L"generalparams_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columngeneralparams_Id);
    this->columnsettings_Id = (gcnew ::System::Data::DataColumn(L"settings_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columnsettings_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columngeneralparams_Id}, 
            true)));
    this->columngeneralparams_Id->AutoIncrement = true;
    this->columngeneralparams_Id->AllowDBNull = false;
    this->columngeneralparams_Id->Unique = true;
}

inline NewDataSet::generalparamsRow^  NewDataSet::generalparamsDataTable::NewgeneralparamsRow() {
    return (cli::safe_cast<NewDataSet::generalparamsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::generalparamsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::generalparamsRow(builder));
}

inline ::System::Type^  NewDataSet::generalparamsDataTable::GetRowType() {
    return NewDataSet::generalparamsRow::typeid;
}

inline ::System::Void NewDataSet::generalparamsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->generalparamsRowChanged(this, (gcnew NewDataSet::generalparamsRowChangeEvent((cli::safe_cast<NewDataSet::generalparamsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::generalparamsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->generalparamsRowChanging(this, (gcnew NewDataSet::generalparamsRowChangeEvent((cli::safe_cast<NewDataSet::generalparamsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::generalparamsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->generalparamsRowDeleted(this, (gcnew NewDataSet::generalparamsRowChangeEvent((cli::safe_cast<NewDataSet::generalparamsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::generalparamsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->generalparamsRowDeleting(this, (gcnew NewDataSet::generalparamsRowChangeEvent((cli::safe_cast<NewDataSet::generalparamsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::generalparamsDataTable::RemovegeneralparamsRow(NewDataSet::generalparamsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::generalparamsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"generalparamsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::htserverDataTable::htserverDataTable() {
    this->TableName = L"htserver";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::htserverDataTable::htserverDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::htserverDataTable::htserverDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::htserverDataTable::debugconsoleColumn::get() {
    return this->columndebugconsole;
}

inline ::System::Data::DataColumn^  NewDataSet::htserverDataTable::portColumn::get() {
    return this->columnport;
}

inline ::System::Data::DataColumn^  NewDataSet::htserverDataTable::internalloglevelColumn::get() {
    return this->columninternalloglevel;
}

inline ::System::Data::DataColumn^  NewDataSet::htserverDataTable::eventlevelColumn::get() {
    return this->columneventlevel;
}

inline ::System::Data::DataColumn^  NewDataSet::htserverDataTable::generalparams_IdColumn::get() {
    return this->columngeneralparams_Id;
}

inline ::System::Int32 NewDataSet::htserverDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::htserverRow^  NewDataSet::htserverDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::htserverRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::htserverDataTable::AddhtserverRow(NewDataSet::htserverRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::htserverRow^  NewDataSet::htserverDataTable::AddhtserverRow(System::String^  debugconsole, System::Int64 port, 
            System::Int64 internalloglevel, System::Int64 eventlevel, NewDataSet::generalparamsRow^  parentgeneralparamsRowBygeneralparams_htserver) {
    NewDataSet::htserverRow^  rowhtserverRow = (cli::safe_cast<NewDataSet::htserverRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(5) {debugconsole, port, internalloglevel, 
        eventlevel, nullptr};
    if (parentgeneralparamsRowBygeneralparams_htserver != nullptr) {
        columnValuesArray[4] = parentgeneralparamsRowBygeneralparams_htserver[0];
    }
    rowhtserverRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowhtserverRow);
    return rowhtserverRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::htserverDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::htserverDataTable::Clone() {
    NewDataSet::htserverDataTable^  cln = (cli::safe_cast<NewDataSet::htserverDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::htserverDataTable::CreateInstance() {
    return (gcnew NewDataSet::htserverDataTable());
}

inline ::System::Void NewDataSet::htserverDataTable::InitVars() {
    this->columndebugconsole = __super::Columns[L"debugconsole"];
    this->columnport = __super::Columns[L"port"];
    this->columninternalloglevel = __super::Columns[L"internalloglevel"];
    this->columneventlevel = __super::Columns[L"eventlevel"];
    this->columngeneralparams_Id = __super::Columns[L"generalparams_Id"];
}

inline ::System::Void NewDataSet::htserverDataTable::InitClass() {
    this->columndebugconsole = (gcnew ::System::Data::DataColumn(L"debugconsole", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columndebugconsole);
    this->columnport = (gcnew ::System::Data::DataColumn(L"port", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnport);
    this->columninternalloglevel = (gcnew ::System::Data::DataColumn(L"internalloglevel", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columninternalloglevel);
    this->columneventlevel = (gcnew ::System::Data::DataColumn(L"eventlevel", ::System::Int64::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columneventlevel);
    this->columngeneralparams_Id = (gcnew ::System::Data::DataColumn(L"generalparams_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columngeneralparams_Id);
    this->columnport->AllowDBNull = false;
    this->columninternalloglevel->AllowDBNull = false;
    this->columneventlevel->AllowDBNull = false;
}

inline NewDataSet::htserverRow^  NewDataSet::htserverDataTable::NewhtserverRow() {
    return (cli::safe_cast<NewDataSet::htserverRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::htserverDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::htserverRow(builder));
}

inline ::System::Type^  NewDataSet::htserverDataTable::GetRowType() {
    return NewDataSet::htserverRow::typeid;
}

inline ::System::Void NewDataSet::htserverDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->htserverRowChanged(this, (gcnew NewDataSet::htserverRowChangeEvent((cli::safe_cast<NewDataSet::htserverRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::htserverDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->htserverRowChanging(this, (gcnew NewDataSet::htserverRowChangeEvent((cli::safe_cast<NewDataSet::htserverRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::htserverDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->htserverRowDeleted(this, (gcnew NewDataSet::htserverRowChangeEvent((cli::safe_cast<NewDataSet::htserverRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::htserverDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->htserverRowDeleting(this, (gcnew NewDataSet::htserverRowChangeEvent((cli::safe_cast<NewDataSet::htserverRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::htserverDataTable::RemovehtserverRow(NewDataSet::htserverRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::htserverDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"htserverDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::eventpluginparamsDataTable::eventpluginparamsDataTable() {
    this->TableName = L"eventpluginparams";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::eventpluginparamsDataTable::eventpluginparamsDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::eventpluginparamsDataTable::eventpluginparamsDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
            ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::eventpluginparamsDataTable::eventpluginparams_IdColumn::get() {
    return this->columneventpluginparams_Id;
}

inline ::System::Data::DataColumn^  NewDataSet::eventpluginparamsDataTable::generalparams_IdColumn::get() {
    return this->columngeneralparams_Id;
}

inline ::System::Int32 NewDataSet::eventpluginparamsDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::eventpluginparamsRow^  NewDataSet::eventpluginparamsDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::eventpluginparamsRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::eventpluginparamsDataTable::AddeventpluginparamsRow(NewDataSet::eventpluginparamsRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::eventpluginparamsRow^  NewDataSet::eventpluginparamsDataTable::AddeventpluginparamsRow(NewDataSet::generalparamsRow^  parentgeneralparamsRowBygeneralparams_eventpluginparams) {
    NewDataSet::eventpluginparamsRow^  roweventpluginparamsRow = (cli::safe_cast<NewDataSet::eventpluginparamsRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(2) {nullptr, nullptr};
    if (parentgeneralparamsRowBygeneralparams_eventpluginparams != nullptr) {
        columnValuesArray[1] = parentgeneralparamsRowBygeneralparams_eventpluginparams[0];
    }
    roweventpluginparamsRow->ItemArray = columnValuesArray;
    this->Rows->Add(roweventpluginparamsRow);
    return roweventpluginparamsRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::eventpluginparamsDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::eventpluginparamsDataTable::Clone() {
    NewDataSet::eventpluginparamsDataTable^  cln = (cli::safe_cast<NewDataSet::eventpluginparamsDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::eventpluginparamsDataTable::CreateInstance() {
    return (gcnew NewDataSet::eventpluginparamsDataTable());
}

inline ::System::Void NewDataSet::eventpluginparamsDataTable::InitVars() {
    this->columneventpluginparams_Id = __super::Columns[L"eventpluginparams_Id"];
    this->columngeneralparams_Id = __super::Columns[L"generalparams_Id"];
}

inline ::System::Void NewDataSet::eventpluginparamsDataTable::InitClass() {
    this->columneventpluginparams_Id = (gcnew ::System::Data::DataColumn(L"eventpluginparams_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columneventpluginparams_Id);
    this->columngeneralparams_Id = (gcnew ::System::Data::DataColumn(L"generalparams_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columngeneralparams_Id);
    this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columneventpluginparams_Id}, 
            true)));
    this->columneventpluginparams_Id->AutoIncrement = true;
    this->columneventpluginparams_Id->AllowDBNull = false;
    this->columneventpluginparams_Id->Unique = true;
}

inline NewDataSet::eventpluginparamsRow^  NewDataSet::eventpluginparamsDataTable::NeweventpluginparamsRow() {
    return (cli::safe_cast<NewDataSet::eventpluginparamsRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::eventpluginparamsDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::eventpluginparamsRow(builder));
}

inline ::System::Type^  NewDataSet::eventpluginparamsDataTable::GetRowType() {
    return NewDataSet::eventpluginparamsRow::typeid;
}

inline ::System::Void NewDataSet::eventpluginparamsDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->eventpluginparamsRowChanged(this, (gcnew NewDataSet::eventpluginparamsRowChangeEvent((cli::safe_cast<NewDataSet::eventpluginparamsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::eventpluginparamsDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->eventpluginparamsRowChanging(this, (gcnew NewDataSet::eventpluginparamsRowChangeEvent((cli::safe_cast<NewDataSet::eventpluginparamsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::eventpluginparamsDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->eventpluginparamsRowDeleted(this, (gcnew NewDataSet::eventpluginparamsRowChangeEvent((cli::safe_cast<NewDataSet::eventpluginparamsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::eventpluginparamsDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->eventpluginparamsRowDeleting(this, (gcnew NewDataSet::eventpluginparamsRowChangeEvent((cli::safe_cast<NewDataSet::eventpluginparamsRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::eventpluginparamsDataTable::RemoveeventpluginparamsRow(NewDataSet::eventpluginparamsRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::eventpluginparamsDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"eventpluginparamsDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::entryDataTable::entryDataTable() {
    this->TableName = L"entry";
    this->BeginInit();
    this->InitClass();
    this->EndInit();
}

inline NewDataSet::entryDataTable::entryDataTable(::System::Data::DataTable^  table) {
    this->TableName = table->TableName;
    if (table->CaseSensitive != table->DataSet->CaseSensitive) {
        this->CaseSensitive = table->CaseSensitive;
    }
    if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
        this->Locale = table->Locale;
    }
    if (table->Namespace != table->DataSet->Namespace) {
        this->Namespace = table->Namespace;
    }
    this->Prefix = table->Prefix;
    this->MinimumCapacity = table->MinimumCapacity;
}

inline NewDataSet::entryDataTable::entryDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
        ::System::Data::DataTable(info, context) {
    this->InitVars();
}

inline ::System::Data::DataColumn^  NewDataSet::entryDataTable::nameColumn::get() {
    return this->columnname;
}

inline ::System::Data::DataColumn^  NewDataSet::entryDataTable::_valueColumn::get() {
    return this->column_value;
}

inline ::System::Data::DataColumn^  NewDataSet::entryDataTable::eventpluginparams_IdColumn::get() {
    return this->columneventpluginparams_Id;
}

inline ::System::Int32 NewDataSet::entryDataTable::Count::get() {
    return this->Rows->Count;
}

inline NewDataSet::entryRow^  NewDataSet::entryDataTable::default::get(::System::Int32 index) {
    return (cli::safe_cast<NewDataSet::entryRow^  >(this->Rows[index]));
}

inline ::System::Void NewDataSet::entryDataTable::AddentryRow(NewDataSet::entryRow^  row) {
    this->Rows->Add(row);
}

inline NewDataSet::entryRow^  NewDataSet::entryDataTable::AddentryRow(System::String^  name, System::String^  _value, NewDataSet::eventpluginparamsRow^  parenteventpluginparamsRowByeventpluginparams_entry) {
    NewDataSet::entryRow^  rowentryRow = (cli::safe_cast<NewDataSet::entryRow^  >(this->NewRow()));
    cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {name, _value, nullptr};
    if (parenteventpluginparamsRowByeventpluginparams_entry != nullptr) {
        columnValuesArray[2] = parenteventpluginparamsRowByeventpluginparams_entry[0];
    }
    rowentryRow->ItemArray = columnValuesArray;
    this->Rows->Add(rowentryRow);
    return rowentryRow;
}

inline ::System::Collections::IEnumerator^  NewDataSet::entryDataTable::GetEnumerator() {
    return this->Rows->GetEnumerator();
}

inline ::System::Data::DataTable^  NewDataSet::entryDataTable::Clone() {
    NewDataSet::entryDataTable^  cln = (cli::safe_cast<NewDataSet::entryDataTable^  >(__super::Clone()));
    cln->InitVars();
    return cln;
}

inline ::System::Data::DataTable^  NewDataSet::entryDataTable::CreateInstance() {
    return (gcnew NewDataSet::entryDataTable());
}

inline ::System::Void NewDataSet::entryDataTable::InitVars() {
    this->columnname = __super::Columns[L"name"];
    this->column_value = __super::Columns[L"value"];
    this->columneventpluginparams_Id = __super::Columns[L"eventpluginparams_Id"];
}

inline ::System::Void NewDataSet::entryDataTable::InitClass() {
    this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->columnname);
    this->column_value = (gcnew ::System::Data::DataColumn(L"value", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
    __super::Columns->Add(this->column_value);
    this->columneventpluginparams_Id = (gcnew ::System::Data::DataColumn(L"eventpluginparams_Id", ::System::Int32::typeid, nullptr, 
        ::System::Data::MappingType::Hidden));
    __super::Columns->Add(this->columneventpluginparams_Id);
    this->columnname->AllowDBNull = false;
    this->column_value->AllowDBNull = false;
}

inline NewDataSet::entryRow^  NewDataSet::entryDataTable::NewentryRow() {
    return (cli::safe_cast<NewDataSet::entryRow^  >(this->NewRow()));
}

inline ::System::Data::DataRow^  NewDataSet::entryDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
    return (gcnew NewDataSet::entryRow(builder));
}

inline ::System::Type^  NewDataSet::entryDataTable::GetRowType() {
    return NewDataSet::entryRow::typeid;
}

inline ::System::Void NewDataSet::entryDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanged(e);
    {
        this->entryRowChanged(this, (gcnew NewDataSet::entryRowChangeEvent((cli::safe_cast<NewDataSet::entryRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::entryDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowChanging(e);
    {
        this->entryRowChanging(this, (gcnew NewDataSet::entryRowChangeEvent((cli::safe_cast<NewDataSet::entryRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::entryDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleted(e);
    {
        this->entryRowDeleted(this, (gcnew NewDataSet::entryRowChangeEvent((cli::safe_cast<NewDataSet::entryRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::entryDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
    __super::OnRowDeleting(e);
    {
        this->entryRowDeleting(this, (gcnew NewDataSet::entryRowChangeEvent((cli::safe_cast<NewDataSet::entryRow^  >(e->Row)), 
                e->Action)));
    }
}

inline ::System::Void NewDataSet::entryDataTable::RemoveentryRow(NewDataSet::entryRow^  row) {
    this->Rows->Remove(row);
}

inline ::System::Xml::Schema::XmlSchemaComplexType^  NewDataSet::entryDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
    ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
    ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
    NewDataSet^  ds = (gcnew NewDataSet());
    ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
    any1->MinOccurs = ::System::Decimal(0);
    any1->MaxOccurs = ::System::Decimal::MaxValue;
    any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any1);
    ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
    any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
    any2->MinOccurs = ::System::Decimal(1);
    any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
    sequence->Items->Add(any2);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute1->Name = L"namespace";
    attribute1->FixedValue = ds->Namespace;
    type->Attributes->Add(attribute1);
    ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
    attribute2->Name = L"tableTypeName";
    attribute2->FixedValue = L"entryDataTable";
    type->Attributes->Add(attribute2);
    type->Particle = sequence;
    ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
    if (xs->Contains(dsSchema->TargetNamespace)) {
        ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
        ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
        try {
            ::System::Xml::Schema::XmlSchema^  schema = nullptr;
            dsSchema->Write(s1);
            for (            ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();             ) {
                schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                s2->SetLength(0);
                schema->Write(s2);
                if (s1->Length == s2->Length) {
                    s1->Position = 0;
                    s2->Position = 0;
                    for (                    ; ((s1->Position != s1->Length) 
                                && (s1->ReadByte() == s2->ReadByte()));                     ) {
                        ;
                    }
                    if (s1->Position == s1->Length) {
                        return type;
                    }
                }
            }
        }
        finally {
            if (s1 != nullptr) {
                s1->Close();
            }
            if (s2 != nullptr) {
                s2->Close();
            }
        }
    }
    xs->Add(dsSchema);
    return type;
}


inline NewDataSet::settingsRow::settingsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablesettings = (cli::safe_cast<NewDataSet::settingsDataTable^  >(this->Table));
}

inline System::Int64 NewDataSet::settingsRow::mt4loglevel::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tablesettings->mt4loglevelColumn]));
}
inline System::Void NewDataSet::settingsRow::mt4loglevel::set(System::Int64 value) {
    this[this->tablesettings->mt4loglevelColumn] = value;
}

inline System::Int64 NewDataSet::settingsRow::heartbeatjavahtsec::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tablesettings->heartbeatjavahtsecColumn]));
}
inline System::Void NewDataSet::settingsRow::heartbeatjavahtsec::set(System::Int64 value) {
    this[this->tablesettings->heartbeatjavahtsecColumn] = value;
}

inline System::Int64 NewDataSet::settingsRow::mt4datareadintrvalsec::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tablesettings->mt4datareadintrvalsecColumn]));
}
inline System::Void NewDataSet::settingsRow::mt4datareadintrvalsec::set(System::Int64 value) {
    this[this->tablesettings->mt4datareadintrvalsecColumn] = value;
}

inline System::Int64 NewDataSet::settingsRow::zombiemt4killer::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tablesettings->zombiemt4killerColumn]));
}
inline System::Void NewDataSet::settingsRow::zombiemt4killer::set(System::Int64 value) {
    this[this->tablesettings->zombiemt4killerColumn] = value;
}

inline System::Int32 NewDataSet::settingsRow::settings_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablesettings->settings_IdColumn]));
}
inline System::Void NewDataSet::settingsRow::settings_Id::set(System::Int32 value) {
    this[this->tablesettings->settings_IdColumn] = value;
}

inline cli::array< NewDataSet::mtinstancesRow^  >^  NewDataSet::settingsRow::GetmtinstancesRows() {
    if (this->Table->ChildRelations[L"settings_mtinstances"] == nullptr) {
        return gcnew cli::array< NewDataSet::mtinstancesRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::mtinstancesRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"settings_mtinstances"])));
    }
}

inline cli::array< NewDataSet::generalparamsRow^  >^  NewDataSet::settingsRow::GetgeneralparamsRows() {
    if (this->Table->ChildRelations[L"settings_generalparams"] == nullptr) {
        return gcnew cli::array< NewDataSet::generalparamsRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::generalparamsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"settings_generalparams"])));
    }
}


inline NewDataSet::mtinstancesRow::mtinstancesRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablemtinstances = (cli::safe_cast<NewDataSet::mtinstancesDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::mtinstancesRow::mtinstances_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablemtinstances->mtinstances_IdColumn]));
}
inline System::Void NewDataSet::mtinstancesRow::mtinstances_Id::set(System::Int32 value) {
    this[this->tablemtinstances->mtinstances_IdColumn] = value;
}

inline System::Int32 NewDataSet::mtinstancesRow::settings_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablemtinstances->settings_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'settings_Id\' in table \'mtinstances\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::mtinstancesRow::settings_Id::set(System::Int32 value) {
    this[this->tablemtinstances->settings_IdColumn] = value;
}

inline NewDataSet::settingsRow^  NewDataSet::mtinstancesRow::settingsRow::get() {
    return (cli::safe_cast<NewDataSet::settingsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"settings_mtinstances"])));
}
inline System::Void NewDataSet::mtinstancesRow::settingsRow::set(NewDataSet::settingsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"settings_mtinstances"]);
}

inline ::System::Boolean NewDataSet::mtinstancesRow::Issettings_IdNull() {
    return this->IsNull(this->tablemtinstances->settings_IdColumn);
}

inline ::System::Void NewDataSet::mtinstancesRow::Setsettings_IdNull() {
    this[this->tablemtinstances->settings_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::instanceRow^  >^  NewDataSet::mtinstancesRow::GetinstanceRows() {
    if (this->Table->ChildRelations[L"mtinstances_instance"] == nullptr) {
        return gcnew cli::array< NewDataSet::instanceRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::instanceRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"mtinstances_instance"])));
    }
}


inline NewDataSet::instanceRow::instanceRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableinstance = (cli::safe_cast<NewDataSet::instanceDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::instanceRow::path::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableinstance->pathColumn]));
}
inline System::Void NewDataSet::instanceRow::path::set(System::String^  value) {
    this[this->tableinstance->pathColumn] = value;
}

inline System::String^  NewDataSet::instanceRow::name::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableinstance->nameColumn]));
}
inline System::Void NewDataSet::instanceRow::name::set(System::String^  value) {
    this[this->tableinstance->nameColumn] = value;
}

inline System::String^  NewDataSet::instanceRow::loadbalanced::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableinstance->loadbalancedColumn]));
}
inline System::Void NewDataSet::instanceRow::loadbalanced::set(System::String^  value) {
    this[this->tableinstance->loadbalancedColumn] = value;
}

inline System::String^  NewDataSet::instanceRow::autorecover::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableinstance->autorecoverColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'autorecover\' in table \'instance\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::instanceRow::autorecover::set(System::String^  value) {
    this[this->tableinstance->autorecoverColumn] = value;
}

inline System::String^  NewDataSet::instanceRow::autoinstall::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableinstance->autoinstallColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'autoinstall\' in table \'instance\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::instanceRow::autoinstall::set(System::String^  value) {
    this[this->tableinstance->autoinstallColumn] = value;
}

inline System::String^  NewDataSet::instanceRow::autoload::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableinstance->autoloadColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'autoload\' in table \'instance\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::instanceRow::autoload::set(System::String^  value) {
    this[this->tableinstance->autoloadColumn] = value;
}

inline System::String^  NewDataSet::instanceRow::autoqueuerestore::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tableinstance->autoqueuerestoreColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'autoqueuerestore\' in table \'instance\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::instanceRow::autoqueuerestore::set(System::String^  value) {
    this[this->tableinstance->autoqueuerestoreColumn] = value;
}

inline System::String^  NewDataSet::instanceRow::companyid::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableinstance->companyidColumn]));
}
inline System::Void NewDataSet::instanceRow::companyid::set(System::String^  value) {
    this[this->tableinstance->companyidColumn] = value;
}

inline System::String^  NewDataSet::instanceRow::mt_distrib::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableinstance->mt_distribColumn]));
}
inline System::Void NewDataSet::instanceRow::mt_distrib::set(System::String^  value) {
    this[this->tableinstance->mt_distribColumn] = value;
}

inline System::Int32 NewDataSet::instanceRow::mtinstances_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableinstance->mtinstances_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'mtinstances_Id\' in table \'instance\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::instanceRow::mtinstances_Id::set(System::Int32 value) {
    this[this->tableinstance->mtinstances_IdColumn] = value;
}

inline NewDataSet::mtinstancesRow^  NewDataSet::instanceRow::mtinstancesRow::get() {
    return (cli::safe_cast<NewDataSet::mtinstancesRow^  >(this->GetParentRow(this->Table->ParentRelations[L"mtinstances_instance"])));
}
inline System::Void NewDataSet::instanceRow::mtinstancesRow::set(NewDataSet::mtinstancesRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"mtinstances_instance"]);
}

inline ::System::Boolean NewDataSet::instanceRow::IsautorecoverNull() {
    return this->IsNull(this->tableinstance->autorecoverColumn);
}

inline ::System::Void NewDataSet::instanceRow::SetautorecoverNull() {
    this[this->tableinstance->autorecoverColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::instanceRow::IsautoinstallNull() {
    return this->IsNull(this->tableinstance->autoinstallColumn);
}

inline ::System::Void NewDataSet::instanceRow::SetautoinstallNull() {
    this[this->tableinstance->autoinstallColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::instanceRow::IsautoloadNull() {
    return this->IsNull(this->tableinstance->autoloadColumn);
}

inline ::System::Void NewDataSet::instanceRow::SetautoloadNull() {
    this[this->tableinstance->autoloadColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::instanceRow::IsautoqueuerestoreNull() {
    return this->IsNull(this->tableinstance->autoqueuerestoreColumn);
}

inline ::System::Void NewDataSet::instanceRow::SetautoqueuerestoreNull() {
    this[this->tableinstance->autoqueuerestoreColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::instanceRow::Ismtinstances_IdNull() {
    return this->IsNull(this->tableinstance->mtinstances_IdColumn);
}

inline ::System::Void NewDataSet::instanceRow::Setmtinstances_IdNull() {
    this[this->tableinstance->mtinstances_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::generalparamsRow::generalparamsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablegeneralparams = (cli::safe_cast<NewDataSet::generalparamsDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::generalparamsRow::generalparams_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tablegeneralparams->generalparams_IdColumn]));
}
inline System::Void NewDataSet::generalparamsRow::generalparams_Id::set(System::Int32 value) {
    this[this->tablegeneralparams->generalparams_IdColumn] = value;
}

inline System::Int32 NewDataSet::generalparamsRow::settings_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablegeneralparams->settings_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'settings_Id\' in table \'generalparams\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::generalparamsRow::settings_Id::set(System::Int32 value) {
    this[this->tablegeneralparams->settings_IdColumn] = value;
}

inline NewDataSet::settingsRow^  NewDataSet::generalparamsRow::settingsRow::get() {
    return (cli::safe_cast<NewDataSet::settingsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"settings_generalparams"])));
}
inline System::Void NewDataSet::generalparamsRow::settingsRow::set(NewDataSet::settingsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"settings_generalparams"]);
}

inline ::System::Boolean NewDataSet::generalparamsRow::Issettings_IdNull() {
    return this->IsNull(this->tablegeneralparams->settings_IdColumn);
}

inline ::System::Void NewDataSet::generalparamsRow::Setsettings_IdNull() {
    this[this->tablegeneralparams->settings_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::htserverRow^  >^  NewDataSet::generalparamsRow::GethtserverRows() {
    if (this->Table->ChildRelations[L"generalparams_htserver"] == nullptr) {
        return gcnew cli::array< NewDataSet::htserverRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::htserverRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"generalparams_htserver"])));
    }
}

inline cli::array< NewDataSet::eventpluginparamsRow^  >^  NewDataSet::generalparamsRow::GeteventpluginparamsRows() {
    if (this->Table->ChildRelations[L"generalparams_eventpluginparams"] == nullptr) {
        return gcnew cli::array< NewDataSet::eventpluginparamsRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::eventpluginparamsRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"generalparams_eventpluginparams"])));
    }
}


inline NewDataSet::htserverRow::htserverRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tablehtserver = (cli::safe_cast<NewDataSet::htserverDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::htserverRow::debugconsole::get() {
    try {
        return (cli::safe_cast<::System::String^  >(this[this->tablehtserver->debugconsoleColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'debugconsole\' in table \'htserver\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::htserverRow::debugconsole::set(System::String^  value) {
    this[this->tablehtserver->debugconsoleColumn] = value;
}

inline System::Int64 NewDataSet::htserverRow::port::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tablehtserver->portColumn]));
}
inline System::Void NewDataSet::htserverRow::port::set(System::Int64 value) {
    this[this->tablehtserver->portColumn] = value;
}

inline System::Int64 NewDataSet::htserverRow::internalloglevel::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tablehtserver->internalloglevelColumn]));
}
inline System::Void NewDataSet::htserverRow::internalloglevel::set(System::Int64 value) {
    this[this->tablehtserver->internalloglevelColumn] = value;
}

inline System::Int64 NewDataSet::htserverRow::eventlevel::get() {
    return (cli::safe_cast<::System::Int64 >(this[this->tablehtserver->eventlevelColumn]));
}
inline System::Void NewDataSet::htserverRow::eventlevel::set(System::Int64 value) {
    this[this->tablehtserver->eventlevelColumn] = value;
}

inline System::Int32 NewDataSet::htserverRow::generalparams_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tablehtserver->generalparams_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'generalparams_Id\' in table \'htserver\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::htserverRow::generalparams_Id::set(System::Int32 value) {
    this[this->tablehtserver->generalparams_IdColumn] = value;
}

inline NewDataSet::generalparamsRow^  NewDataSet::htserverRow::generalparamsRow::get() {
    return (cli::safe_cast<NewDataSet::generalparamsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"generalparams_htserver"])));
}
inline System::Void NewDataSet::htserverRow::generalparamsRow::set(NewDataSet::generalparamsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"generalparams_htserver"]);
}

inline ::System::Boolean NewDataSet::htserverRow::IsdebugconsoleNull() {
    return this->IsNull(this->tablehtserver->debugconsoleColumn);
}

inline ::System::Void NewDataSet::htserverRow::SetdebugconsoleNull() {
    this[this->tablehtserver->debugconsoleColumn] = ::System::Convert::DBNull;
}

inline ::System::Boolean NewDataSet::htserverRow::Isgeneralparams_IdNull() {
    return this->IsNull(this->tablehtserver->generalparams_IdColumn);
}

inline ::System::Void NewDataSet::htserverRow::Setgeneralparams_IdNull() {
    this[this->tablehtserver->generalparams_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::eventpluginparamsRow::eventpluginparamsRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableeventpluginparams = (cli::safe_cast<NewDataSet::eventpluginparamsDataTable^  >(this->Table));
}

inline System::Int32 NewDataSet::eventpluginparamsRow::eventpluginparams_Id::get() {
    return (cli::safe_cast<::System::Int32 >(this[this->tableeventpluginparams->eventpluginparams_IdColumn]));
}
inline System::Void NewDataSet::eventpluginparamsRow::eventpluginparams_Id::set(System::Int32 value) {
    this[this->tableeventpluginparams->eventpluginparams_IdColumn] = value;
}

inline System::Int32 NewDataSet::eventpluginparamsRow::generalparams_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableeventpluginparams->generalparams_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'generalparams_Id\' in table \'eventpluginparams\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::eventpluginparamsRow::generalparams_Id::set(System::Int32 value) {
    this[this->tableeventpluginparams->generalparams_IdColumn] = value;
}

inline NewDataSet::generalparamsRow^  NewDataSet::eventpluginparamsRow::generalparamsRow::get() {
    return (cli::safe_cast<NewDataSet::generalparamsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"generalparams_eventpluginparams"])));
}
inline System::Void NewDataSet::eventpluginparamsRow::generalparamsRow::set(NewDataSet::generalparamsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"generalparams_eventpluginparams"]);
}

inline ::System::Boolean NewDataSet::eventpluginparamsRow::Isgeneralparams_IdNull() {
    return this->IsNull(this->tableeventpluginparams->generalparams_IdColumn);
}

inline ::System::Void NewDataSet::eventpluginparamsRow::Setgeneralparams_IdNull() {
    this[this->tableeventpluginparams->generalparams_IdColumn] = ::System::Convert::DBNull;
}

inline cli::array< NewDataSet::entryRow^  >^  NewDataSet::eventpluginparamsRow::GetentryRows() {
    if (this->Table->ChildRelations[L"eventpluginparams_entry"] == nullptr) {
        return gcnew cli::array< NewDataSet::entryRow^  >(0);
    }
    else {
        return (cli::safe_cast<cli::array< NewDataSet::entryRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"eventpluginparams_entry"])));
    }
}


inline NewDataSet::entryRow::entryRow(::System::Data::DataRowBuilder^  rb) : 
        ::System::Data::DataRow(rb) {
    this->tableentry = (cli::safe_cast<NewDataSet::entryDataTable^  >(this->Table));
}

inline System::String^  NewDataSet::entryRow::name::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableentry->nameColumn]));
}
inline System::Void NewDataSet::entryRow::name::set(System::String^  value) {
    this[this->tableentry->nameColumn] = value;
}

inline System::String^  NewDataSet::entryRow::_value::get() {
    return (cli::safe_cast<::System::String^  >(this[this->tableentry->_valueColumn]));
}
inline System::Void NewDataSet::entryRow::_value::set(System::String^  value) {
    this[this->tableentry->_valueColumn] = value;
}

inline System::Int32 NewDataSet::entryRow::eventpluginparams_Id::get() {
    try {
        return (cli::safe_cast<::System::Int32 >(this[this->tableentry->eventpluginparams_IdColumn]));
    }
    catch (::System::InvalidCastException^ e) {
        throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'eventpluginparams_Id\' in table \'entry\' is DBNull.", 
            e));
    }
}
inline System::Void NewDataSet::entryRow::eventpluginparams_Id::set(System::Int32 value) {
    this[this->tableentry->eventpluginparams_IdColumn] = value;
}

inline NewDataSet::eventpluginparamsRow^  NewDataSet::entryRow::eventpluginparamsRow::get() {
    return (cli::safe_cast<NewDataSet::eventpluginparamsRow^  >(this->GetParentRow(this->Table->ParentRelations[L"eventpluginparams_entry"])));
}
inline System::Void NewDataSet::entryRow::eventpluginparamsRow::set(NewDataSet::eventpluginparamsRow^  value) {
    this->SetParentRow(value, this->Table->ParentRelations[L"eventpluginparams_entry"]);
}

inline ::System::Boolean NewDataSet::entryRow::Iseventpluginparams_IdNull() {
    return this->IsNull(this->tableentry->eventpluginparams_IdColumn);
}

inline ::System::Void NewDataSet::entryRow::Seteventpluginparams_IdNull() {
    this[this->tableentry->eventpluginparams_IdColumn] = ::System::Convert::DBNull;
}


inline NewDataSet::settingsRowChangeEvent::settingsRowChangeEvent(NewDataSet::settingsRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::settingsRow^  NewDataSet::settingsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::settingsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::mtinstancesRowChangeEvent::mtinstancesRowChangeEvent(NewDataSet::mtinstancesRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::mtinstancesRow^  NewDataSet::mtinstancesRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::mtinstancesRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::instanceRowChangeEvent::instanceRowChangeEvent(NewDataSet::instanceRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::instanceRow^  NewDataSet::instanceRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::instanceRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::generalparamsRowChangeEvent::generalparamsRowChangeEvent(NewDataSet::generalparamsRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::generalparamsRow^  NewDataSet::generalparamsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::generalparamsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::htserverRowChangeEvent::htserverRowChangeEvent(NewDataSet::htserverRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::htserverRow^  NewDataSet::htserverRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::htserverRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::eventpluginparamsRowChangeEvent::eventpluginparamsRowChangeEvent(NewDataSet::eventpluginparamsRow^  row, 
            ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::eventpluginparamsRow^  NewDataSet::eventpluginparamsRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::eventpluginparamsRowChangeEvent::Action::get() {
    return this->eventAction;
}


inline NewDataSet::entryRowChangeEvent::entryRowChangeEvent(NewDataSet::entryRow^  row, ::System::Data::DataRowAction action) {
    this->eventRow = row;
    this->eventAction = action;
}

inline NewDataSet::entryRow^  NewDataSet::entryRowChangeEvent::Row::get() {
    return this->eventRow;
}

inline ::System::Data::DataRowAction NewDataSet::entryRowChangeEvent::Action::get() {
    return this->eventAction;
}
